<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WoodenRobot&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://woodenrobot.me/"/>
  <updated>2018-08-20T02:09:05.983Z</updated>
  <id>http://woodenrobot.me/</id>
  
  <author>
    <name>WoodenRobot</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker 占满 Linux 系统盘解决方案</title>
    <link href="http://woodenrobot.me/2018/08/16/Docker-%E5%8D%A0%E6%BB%A1-Linux-%E7%B3%BB%E7%BB%9F%E7%9B%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://woodenrobot.me/2018/08/16/Docker-占满-Linux-系统盘解决方案/</id>
    <published>2018-08-16T12:24:26.000Z</published>
    <updated>2018-08-20T02:09:05.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一般情况下我们通过命令在 Linux 上安装 Docker，Docker 会将文件默认储存在 <code>/var/lib/docker</code> 目录下，时间久了就会占用很大空间，最后导致系统盘被占满。此时需要将文件转移到数据盘上并做一个软连接。</p><hr><a id="more"></a><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>1.首先进入 <code>root</code> 用户：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo su</div></pre></td></tr></table></figure></p><p>2.关闭 Docker 服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ service docker stop</div></pre></td></tr></table></figure></p><p>3.复制 <code>/var/lib/docker</code> 文件夹到系统盘：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cp -pr /var/lib/docker /mnt/data</div></pre></td></tr></table></figure></p><p><strong>注：此处 <code>/mnt/data</code> 为系统盘路径</strong></p><p>4.为了以防万一首先备份 <code>/var/lib/docker</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mv /var/lib/docker /var/lib/docker.bak</div></pre></td></tr></table></figure></p><p>5.建立软连接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ln -s /mnt/data/docker /var/lib/docker</div></pre></td></tr></table></figure></p><p>6.启动 Docker：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ service docker start</div></pre></td></tr></table></figure></p><p>7.启动 Docker 中的容器，根据容器 ID 或者名称启动容器:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ docker ps 查看正在运行的容器</div><div class="line">$ docker ps -a 查看所有容器</div><div class="line">$ docker start CONTAINER ID/NAMES</div></pre></td></tr></table></figure></p><p>8.检测容器中的程序是否正常运行，正常运行后可将 <code>/var/lib/docker.bak</code> 备份文件删除，解决系统盘被占满的问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;一般情况下我们通过命令在 Linux 上安装 Docker，Docker 会将文件默认储存在 &lt;code&gt;/var/lib/docker&lt;/code&gt; 目录下，时间久了就会占用很大空间，最后导致系统盘被占满。此时需要将文件转移到数据盘上并做一个软连接。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="技术" scheme="http://woodenrobot.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="http://woodenrobot.me/tags/Linux/"/>
    
      <category term="Docker" scheme="http://woodenrobot.me/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 架设 OpenVPN 实现内网穿透</title>
    <link href="http://woodenrobot.me/2018/08/11/Ubuntu-%E6%9E%B6%E8%AE%BE-OpenVPN-%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <id>http://woodenrobot.me/2018/08/11/Ubuntu-架设-OpenVPN-实现内网穿透/</id>
    <published>2018-08-11T03:47:52.000Z</published>
    <updated>2018-08-11T04:05:20.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>家里的网络因为没有公网 IP，有时候想要连接到家里的树莓派或者电脑就无法实现。这个时候可以采用内网穿透的方法远程连接家中的机器，内网穿透的方案有很多，下面介绍一种采用 OpenVPN 实现内网穿透的方案。</p><hr><a id="more"></a><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>主机：腾讯云<br>操作系统：Ubuntu 16.04</p><h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><h2 id="安装-OpenVPN"><a href="#安装-OpenVPN" class="headerlink" title="安装 OpenVPN"></a>安装 OpenVPN</h2><p>首先，我们需要在服务器安装 OPenVPN。在 Ubuntu 系统中我们可以通过 <code>apt</code> 简单的进行安装。同时我们也需要安装 <code>easy-rsa</code>，它可以帮助我们生成 VPN 使用过程中所需的 CA 证书。<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get update</div><div class="line">$ sudo apt-get install openvpn easy-rsa</div></pre></td></tr></table></figure></p><h2 id="设置-CA-目录"><a href="#设置-CA-目录" class="headerlink" title="设置 CA 目录"></a>设置 CA 目录</h2><p>OpenVPN 是使用 TLS/SSL 的 VPN。这意味着它利用证书来加密服务器和客户端之间的通信。为了发布受信任的证书，我们需要建立一个自己的简单的证书颁发机构(CA)。<br>使用 <code>make-cadir</code> 命令复制 easy-rsa 模板到 home 目录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make-cadir ~/openvpn/openvpn-ca</div></pre></td></tr></table></figure></p><p>接着进入刚刚新建的目录准备配置 CA:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/openvpn/openvpn-ca</div></pre></td></tr></table></figure></p><h2 id="配置-CA-变量"><a href="#配置-CA-变量" class="headerlink" title="配置 CA 变量"></a>配置 CA 变量</h2><p>进入 <code>~/openvpn/openvpn-ca</code> 目录后，我们需要修改 <code>vars</code> 文件，以便于生成需要的 CA 值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim vars</div></pre></td></tr></table></figure></p><p>在文件底部找到以下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"></div><div class="line">export KEY_COUNTRY=&quot;US&quot;</div><div class="line">export KEY_PROVINCE=&quot;CA&quot;</div><div class="line">export KEY_CITY=&quot;SanFrancisco&quot;</div><div class="line">export KEY_ORG=&quot;Fort-Funston&quot;</div><div class="line">export KEY_EMAIL=&quot;me@myhost.mydomain&quot;</div><div class="line">export KEY_OU=&quot;MyOrganizationalUnit&quot;</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure></p><p>将这些变量修改为任意你喜欢的值，但是不要为空：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"></div><div class="line">export KEY_COUNTRY=&quot;CN&quot;</div><div class="line">export KEY_PROVINCE=&quot;SC&quot;</div><div class="line">export KEY_CITY=&quot;Chengdu&quot;</div><div class="line">export KEY_ORG=&quot;woodenrobot&quot;</div><div class="line">export KEY_EMAIL=&quot;woodenrobot1993@gmail.com&quot;</div><div class="line">export KEY_OU=&quot;Community&quot;</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure></p><p>然后，我们还要修改紧接着出现的 <code>KEY_NAME</code> 的值，为了简单起见，我们改为 <code>server</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export KEY_NAME=&quot;server&quot;</div></pre></td></tr></table></figure></p><h2 id="构建-CA-证书"><a href="#构建-CA-证书" class="headerlink" title="构建 CA 证书"></a>构建 CA 证书</h2><p>首先进入你的 CA 目录，然后执行 <code>source vars</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd ~/openvpn/openvpn-ca</div><div class="line">$ source vars</div></pre></td></tr></table></figure></p><p>接着会有以下输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ NOTE: If you run ./clean-all, I will be doing a rm -rf on /home/ubuntu/openvpn/openvpn-ca/keys</div></pre></td></tr></table></figure></p><p>执行下列操作确保操作环境干净：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./clean-all</div></pre></td></tr></table></figure></p><p>现在我们可以构建根 CA：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./build-ca</div></pre></td></tr></table></figure></p><p>这将会启动创建根证书颁发密钥、证书的过程。由于我们刚才修改了 vars 文件，所有值应该都会自动填充。所以，一路回车就好了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Generating a 2048 bit RSA private key</div><div class="line">..........................................................................................+++</div><div class="line">...............................+++</div><div class="line">writing new private key to &apos;ca.key&apos;</div><div class="line">-----</div><div class="line">You are about to be asked to enter information that will be incorporated</div><div class="line">into your certificate request.</div><div class="line">What you are about to enter is what is called a Distinguished Name or a DN.</div><div class="line">There are quite a few fields but you can leave some blank</div><div class="line">For some fields there will be a default value,</div><div class="line">If you enter &apos;.&apos;, the field will be left blank.</div><div class="line">-----</div><div class="line">Country Name (2 letter code) [CN]:</div><div class="line">State or Province Name (full name) [BJ]:</div><div class="line">Locality Name (eg, city) [Beijing]:</div><div class="line">Organization Name (eg, company) [woodenrobot]:</div><div class="line">Organizational Unit Name (eg, section) [Community]:</div><div class="line">Common Name (eg, your name or your server&apos;s hostname) [woodenrobot]:</div><div class="line">Name [server]:</div><div class="line">Email Address [woodenrobot@163.com]:</div></pre></td></tr></table></figure></p><p>现在，我们就有了创建以下步骤需要的 CA 证书。</p><h2 id="创建服务器端证书、密钥和加密文件"><a href="#创建服务器端证书、密钥和加密文件" class="headerlink" title="创建服务器端证书、密钥和加密文件"></a>创建服务器端证书、密钥和加密文件</h2><p>通过下列命令生成服务器端证书和秘钥：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./build-key-server server</div></pre></td></tr></table></figure></p><p>注：<code>server</code> 就是刚才在 <code>vars</code> 文件中修改的 <code>KEY_NAME</code> 变量的值。请不要使用别的名字！<br>然后一直回车选择默认值即可，不要设置 <code>challenge password</code>，直接回车即可。到最后，你需要输入两次 y 注册证书和提交。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"></div><div class="line">Certificate is to be certified until May  1 17:51:16 2026 GMT (3650 days)</div><div class="line">Sign the certificate? [y/n]:y</div><div class="line"></div><div class="line"></div><div class="line">1 out of 1 certificate requests certified, commit? [y/n]y</div><div class="line">Write out database with 1 new entries</div><div class="line">Data Base Updated</div></pre></td></tr></table></figure><p>然后还需要生成一些其他东西。我们可以在密钥交换过程中生成一个强大的 Diffie-Hellman 密钥:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./build-dh</div></pre></td></tr></table></figure></p><p>这个操作大约会花费几分钟不等。<br>然后，我们可以生成 HMAC 签名加强服务器的 TLS 完整性验证功能：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ openvpn --genkey --secret keys/ta.key</div></pre></td></tr></table></figure></p><h2 id="配置-OpenVPN-服务"><a href="#配置-OpenVPN-服务" class="headerlink" title="配置 OpenVPN 服务"></a>配置 OpenVPN 服务</h2><p>首先将刚刚生成的各类文件复制到 OpenVPN 目录下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd ~/openvpn-ca/keys</div><div class="line">$ sudo cp ca.crt ca.key server.crt server.key ta.key dh2048.pem /etc/openvpn</div></pre></td></tr></table></figure></p><p>然后，解压并复制一个 OpenVPN 配置文件到 OpenVPN 目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gunzip -c /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz | sudo tee /etc/openvpn/server.conf</div></pre></td></tr></table></figure></p><p>接着更改配置，注释掉 <code>udp</code> 更改协议为 <code>tcp</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">proto tcp</div><div class="line">;proto udp</div></pre></td></tr></table></figure></p><p>找到 <code>tls-auth</code> 位置，去掉注释，并在下面新增一行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tls-auth ta.key 0 # This file is secret</div><div class="line">key-direction 0</div></pre></td></tr></table></figure></p><p>去掉 <code>user</code> 和 <code>group</code> 行前的注释：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">user nobody</div><div class="line">group nogroup</div></pre></td></tr></table></figure></p><p>去掉 <code>client-to-client</code> 行前的注释允许客户端之间互相访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">client-to-client</div></pre></td></tr></table></figure></p><p>开启客户端固定 IP 配置文件夹：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">client-config-dir ccd</div></pre></td></tr></table></figure></p><p>去掉注释后的完整配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">port 1194</div><div class="line"></div><div class="line">proto udp</div><div class="line"></div><div class="line">dev tun</div><div class="line"></div><div class="line">ca ca.crt</div><div class="line">cert server.crt</div><div class="line">key server.key</div><div class="line"></div><div class="line">dh dh2048.pem</div><div class="line"></div><div class="line">server 10.8.0.0 255.255.255.0</div><div class="line"></div><div class="line">ifconfig-pool-persist ipp.txt</div><div class="line"></div><div class="line">client-config-dir ccd</div><div class="line"></div><div class="line">client-to-client</div><div class="line"></div><div class="line">keepalive 10 120</div><div class="line"></div><div class="line">tls-auth ta.key 0</div><div class="line">key-direction 0</div><div class="line"></div><div class="line">comp-lzo</div><div class="line"></div><div class="line">user nobody</div><div class="line">group nogroup</div><div class="line"></div><div class="line">persist-key</div><div class="line">persist-tun</div><div class="line"></div><div class="line">status openvpn-status.log</div><div class="line"></div><div class="line">verb 3</div></pre></td></tr></table></figure></p><h2 id="调整服务器网络配置"><a href="#调整服务器网络配置" class="headerlink" title="调整服务器网络配置"></a>调整服务器网络配置</h2><h3 id="允许-IP-转发"><a href="#允许-IP-转发" class="headerlink" title="允许 IP 转发"></a>允许 IP 转发</h3><p>编辑 <code>sudo vim /etc/sysctl.conf</code> 文件，去掉 <code>net.ipv4.ip_forward</code> 设置前的注释：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">net.ipv4.ip_forward=1</div></pre></td></tr></table></figure></p><p>输入 <code>sudo sysctl -p</code> 读取文件并对当前会话生效。</p><h3 id="调整-UFW-规则"><a href="#调整-UFW-规则" class="headerlink" title="调整 UFW 规则"></a>调整 UFW 规则</h3><p><code>sudo vim /etc/ufw/before.rules</code>  编辑文件，在文件顶部，新增如下 11-18 行的内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">01 #</div><div class="line">02 # rules.before</div><div class="line">03 #</div><div class="line">04 # Rules that should be run before the ufw command line added rules. Custom</div><div class="line">05 # rules should be added to one of these chains:</div><div class="line">06 #   ufw-before-input</div><div class="line">07 #   ufw-before-output</div><div class="line">08 #   ufw-before-forward</div><div class="line">09 #</div><div class="line">10 </div><div class="line">11 # START OPENVPN RULES</div><div class="line">12 # NAT table rules</div><div class="line">13 *nat</div><div class="line">14 :POSTROUTING ACCEPT [0:0] </div><div class="line">15 # Allow traffic from OpenVPN client to eth0</div><div class="line">16 -A POSTROUTING -s 10.8.0.0/8 -o eth0 -j MASQUERADE</div><div class="line">17 COMMIT</div><div class="line">18 # END OPENVPN RULES</div><div class="line">19</div><div class="line">20 # Don&apos;t delete these required lines, otherwise there will be errors</div><div class="line">*filter</div><div class="line">. . .</div></pre></td></tr></table></figure></p><p>其中，第 16 行还需要做一点调整。在终端执行 ip route | grep default 命令，你会看到类似如下的输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">default via xxx.xxx.xxx.xxx dev eth0</div></pre></td></tr></table></figure></p><p>dev 后的内容如果与第 16 行的 <code>eth0</code> 不同则更换 <code>eth0</code> 为 dev 后的内容，保存文件退出。</p><p>接着 <code>sudo vim /etc/default/ufw</code>  修改文件，找到  <code>DEFAULT_FORWARD_POLICY</code>  设置，修改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DEFAULT_FORWARD_POLICY=&quot;ACCEPT&quot;</div></pre></td></tr></table></figure></p><h3 id="打开-OpenVPN-端口并使变化生效"><a href="#打开-OpenVPN-端口并使变化生效" class="headerlink" title="打开 OpenVPN 端口并使变化生效"></a>打开 OpenVPN 端口并使变化生效</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo ufw allow 1194/tcp</div><div class="line">$ sudo ufw disable</div><div class="line">$ sudo ufw enable</div></pre></td></tr></table></figure><h2 id="启动-OpenVPN"><a href="#启动-OpenVPN" class="headerlink" title="启动 OpenVPN"></a>启动 OpenVPN</h2><p>执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo systemctl start openvpn@server</div></pre></td></tr></table></figure></p><p>设置开机自启：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo systemctl enable openvpn@server</div></pre></td></tr></table></figure></p><h2 id="创建客户端配置"><a href="#创建客户端配置" class="headerlink" title="创建客户端配置"></a>创建客户端配置</h2><h3 id="生成客户端证书、密钥对"><a href="#生成客户端证书、密钥对" class="headerlink" title="生成客户端证书、密钥对"></a>生成客户端证书、密钥对</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cd ~/openvpn-ca</div><div class="line">$ source vars</div><div class="line">$ ./build-key client-woodenrobot</div></pre></td></tr></table></figure><p><code>client-woodenrobot</code> 为密钥对名称，生成过程中回车选择默认选项即可。</p><h3 id="创建客户端配置-1"><a href="#创建客户端配置-1" class="headerlink" title="创建客户端配置"></a>创建客户端配置</h3><p>执行下列命令，生成客户端配置的基础文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p ~/client-configs/files</div><div class="line">$ chmod 700 ~/client-configs/files</div><div class="line">$ cp /usr/share/doc/openvpn/examples/sample-config-files/client.conf ~/client-configs/base.conf</div></pre></td></tr></table></figure></p><p>然后打开 ~/client-configs/base.conf 文件，修改 <code>remote server_IP_address 1194</code> 一行为你的服务器公网 IP。<br>然后更改客户端协议为 <code>tcp</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">;dev tap</div><div class="line">dev tun</div></pre></td></tr></table></figure></p><p>去掉 <code>user</code> 和 <code>group</code> 前的注释：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># Downgrade privileges after initialization (non-Windows only)</div><div class="line">user nobody</div><div class="line">group nogroup</div></pre></td></tr></table></figure></p><p>找到 ca/cert/key，注释掉：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># SSL/TLS parms.</div><div class="line"># See the server config file for more</div><div class="line"># description.  It&apos;s best to use</div><div class="line"># a separate .crt/.key file pair</div><div class="line"># for each client.  A single ca</div><div class="line"># file can be used for all clients.</div><div class="line">#ca ca.crt</div><div class="line">#cert client.crt</div><div class="line">#key client.key</div></pre></td></tr></table></figure></p><p>最后在文件末新增一行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">key-direction 1</div></pre></td></tr></table></figure></p><p>保存退出文件。<br>去掉注释后的完整配置为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">client</div><div class="line"></div><div class="line">dev tun</div><div class="line"></div><div class="line">proto tcp</div><div class="line"></div><div class="line">remote server_IP_address 1194</div><div class="line"></div><div class="line">resolv-retry infinite</div><div class="line"></div><div class="line">nobind</div><div class="line"></div><div class="line">user nobody</div><div class="line">group nogroup</div><div class="line"></div><div class="line">persist-key</div><div class="line">persist-tun</div><div class="line"></div><div class="line">remote-cert-tls server</div><div class="line"></div><div class="line">comp-lzo</div><div class="line"></div><div class="line">verb 3</div><div class="line"></div><div class="line">key-direction 1</div></pre></td></tr></table></figure></p><h2 id="创建配置生成脚本"><a href="#创建配置生成脚本" class="headerlink" title="创建配置生成脚本"></a>创建配置生成脚本</h2><p>新建 ~/client-configs/make_config.sh 文件，复制如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"># First argument: Client identifier</div><div class="line">KEY_DIR=~/openvpn-ca/keys</div><div class="line">OUTPUT_DIR=~/client-configs/files</div><div class="line">BASE_CONFIG=~/client-configs/base.conf</div><div class="line">cat $&#123;BASE_CONFIG&#125; \</div><div class="line">    &lt;(echo -e &apos;&lt;ca&gt;&apos;) \</div><div class="line">    $&#123;KEY_DIR&#125;/ca.crt \</div><div class="line">    &lt;(echo -e &apos;&lt;/ca&gt;\n&lt;cert&gt;&apos;) \</div><div class="line">    $&#123;KEY_DIR&#125;/$&#123;1&#125;.crt \</div><div class="line">    &lt;(echo -e &apos;&lt;/cert&gt;\n&lt;key&gt;&apos;) \</div><div class="line">    $&#123;KEY_DIR&#125;/$&#123;1&#125;.key \</div><div class="line">    &lt;(echo -e &apos;&lt;/key&gt;\n&lt;tls-auth&gt;&apos;) \</div><div class="line">    $&#123;KEY_DIR&#125;/ta.key \</div><div class="line">    &lt;(echo -e &apos;&lt;/tls-auth&gt;&apos;) \</div><div class="line">    &gt; $&#123;OUTPUT_DIR&#125;/$&#123;1&#125;.ovpn</div></pre></td></tr></table></figure></p><p>保存并赋予执行权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chmod 700 ~/client-configs/make_config.sh</div></pre></td></tr></table></figure></p><h2 id="生成客户端配置"><a href="#生成客户端配置" class="headerlink" title="生成客户端配置"></a>生成客户端配置</h2><p>执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd ~/client-configs</div><div class="line">$ ./make_config.sh client-woodenrobot</div></pre></td></tr></table></figure></p><p>使用此脚本生成一个配置文件方便客户端使用。<br><strong>注：需要生成客户端密钥后才可使用脚本生成配置文件，<code>client-woodenrobot.ovpn</code> 为刚刚生成的客户端密钥名称</strong><br>生成后的脚本储存在  <code>~/client-configs/files</code> 目录下，名称为 <code>client-woodenrobot</code>。将文件下载到本地即可使用了。</p><h2 id="为客户端设置固定-IP"><a href="#为客户端设置固定-IP" class="headerlink" title="为客户端设置固定 IP"></a>为客户端设置固定 IP</h2><p>首先在 OpenVPN 所在的文件夹内创建 <code>ccd</code> 文件夹：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo mkdir -p /etc/openvpn/ccd</div></pre></td></tr></table></figure></p><p>然后进入该文件夹并创建与客户端密钥名称相同的文件夹并写入一下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd /etc/openvpn/ccd</div><div class="line">$ vim client-woodenrobot</div></pre></td></tr></table></figure></p><p>内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ifconfig-push 10.8.0.8 10.8.0.9</div></pre></td></tr></table></figure></p><p>此内容意为固定 <code>client-woodenrobot</code> 客户端的 OpenVPN 内网 IP 为 <code>10.8.0.8</code>。</p><h1 id="客户端命令行使用"><a href="#客户端命令行使用" class="headerlink" title="客户端命令行使用"></a>客户端命令行使用</h1><p>首先安装 <code>OpenVPN</code>, 运行时选择配置为客户端配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo openvpn --config client-woodenrobot.ovpn</div></pre></td></tr></table></figure></p><p>使用此方法可以让家里的电脑或者树莓派等设备实现内网穿透，从而远程连接进行操作。  </p><h2 id="注：该方法只有连接内网机器时会使用-OpenVPN-代理，平时访问网页等不会走代理，并不是全局代理，节省服务带宽的使用"><a href="#注：该方法只有连接内网机器时会使用-OpenVPN-代理，平时访问网页等不会走代理，并不是全局代理，节省服务带宽的使用" class="headerlink" title="注：该方法只有连接内网机器时会使用 OpenVPN 代理，平时访问网页等不会走代理，并不是全局代理，节省服务带宽的使用  "></a><strong>注：该方法只有连接内网机器时会使用 OpenVPN 代理，平时访问网页等不会走代理，并不是全局代理，节省服务带宽的使用</strong>  </h2><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://xlzd.me/2016/10/10/openvpn/" target="_blank" rel="external">怎样在 Ubuntu 16.04 上安装 OpenVPN 服务</a></li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-an-openvpn-server-on-ubuntu-16-04" target="_blank" rel="external">How To Set Up an OpenVPN Server on Ubuntu 16.04</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;家里的网络因为没有公网 IP，有时候想要连接到家里的树莓派或者电脑就无法实现。这个时候可以采用内网穿透的方法远程连接家中的机器，内网穿透的方案有很多，下面介绍一种采用 OpenVPN 实现内网穿透的方案。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="技术" scheme="http://woodenrobot.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Ubuntu" scheme="http://woodenrobot.me/tags/Ubuntu/"/>
    
      <category term="OpenVPN" scheme="http://woodenrobot.me/tags/OpenVPN/"/>
    
      <category term="内网穿透" scheme="http://woodenrobot.me/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>服务器 authorized_keys 添加公钥后登录仍需要密码</title>
    <link href="http://woodenrobot.me/2018/07/23/%E6%9C%8D%E5%8A%A1%E5%99%A8-authorized-keys-%E6%B7%BB%E5%8A%A0%E5%85%AC%E9%92%A5%E5%90%8E%E7%99%BB%E5%BD%95%E4%BB%8D%E9%9C%80%E8%A6%81%E5%AF%86%E7%A0%81/"/>
    <id>http://woodenrobot.me/2018/07/23/服务器-authorized-keys-添加公钥后登录仍需要密码/</id>
    <published>2018-07-23T11:49:29.000Z</published>
    <updated>2018-07-23T11:52:55.870Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在服务器的 <code>~/.ssh/authorized_keys</code> 文件内加入自己的公钥, 按理说下次在有该公钥的机器登录服务器时可以免密登录。但在一台服务器上遇到无法免密登录的情况。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>造成这个问题的原因是 <code>~/.ssh</code> 文件夹和，文件夹内的文件权限不对。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ cd ~</div><div class="line">$ chmod 700 .ssh</div><div class="line">$ cd .ssh</div><div class="line">$ chmod 644 authorized_keys id_rsa.pub</div><div class="line">$ chmod 600 id_rsa</div></pre></td></tr></table></figure></p><p>更改文件夹和文件为合适的权限后即可实现免密登录。<br>为什么要使用几个权限并不太清楚，虽然只要不给其他用户和用户组可写的权限都可以正常使用免密登录，但是尽量还是按照这几个文件及文件夹默认的权限去设置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;在服务器的 &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; 文件内加入自己的公钥, 按理说下次在有该公钥的机器登录服
      
    
    </summary>
    
      <category term="技术" scheme="http://woodenrobot.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="http://woodenrobot.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>常用命令行快捷键</title>
    <link href="http://woodenrobot.me/2018/06/18/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://woodenrobot.me/2018/06/18/常用命令行快捷键/</id>
    <published>2018-06-18T04:02:43.000Z</published>
    <updated>2018-06-18T04:07:05.316Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>开发过程中经常会使用到命令行，有很多命令行快捷键可以很方便的提高我们的工作效率。<br><a id="more"></a></p><h1 id="Mac-iTerm2-设置"><a href="#Mac-iTerm2-设置" class="headerlink" title="Mac iTerm2 设置"></a>Mac iTerm2 设置</h1><p>Mac 下 iTerm2 需要设置一下才能使用一些快捷键。<br>打开 <code>Preferences &gt; Profiles &gt; Keys</code> 按下图所示选择 <code>Esc+</code>:<br><img src="http://7xraal.com1.z0.glb.clouddn.com/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BF%AB%E6%8D%B7%E9%94%AEkeyshorts.png" alt=""></p><h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><h2 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h2><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>Ctrl-a</td><td>移动光标到行首</td></tr><tr><td>Ctrl-e</td><td>移动光标到行尾</td></tr><tr><td>Ctrl-f</td><td>光标前移一个字符；和右箭头作用一样</td></tr><tr><td>Ctrl-b</td><td>光标后移一个字符；和左箭头作用一样</td></tr><tr><td>Alt-f</td><td>光标前移一个字</td></tr><tr><td>Alt-b</td><td>光标后移一个字</td></tr><tr><td>Ctrl-l</td><td>清空屏幕，移动光标到左上角。clear 命令完成同样的工作</td></tr></tbody></table><h2 id="修改文本"><a href="#修改文本" class="headerlink" title="修改文本"></a>修改文本</h2><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>Ctrl-d</td><td>删除光标位置的字符</td></tr><tr><td>Ctrl-t</td><td>光标位置的字符和光标前面的字符互换位置</td></tr><tr><td>Alt-t</td><td>光标位置的字和其前面的字互换位置</td></tr><tr><td>Alt-l</td><td>把从光标位置到字尾的字符转换成小写字母</td></tr><tr><td>Alt-u</td><td>把从光标位置到字尾的字符转换成大写字母</td></tr></tbody></table><h2 id="剪切和粘贴文本"><a href="#剪切和粘贴文本" class="headerlink" title="剪切和粘贴文本"></a>剪切和粘贴文本</h2><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>Ctrl-k</td><td>剪切从光标位置到行尾的文本</td></tr><tr><td>Ctrl-u</td><td>剪切从光标位置到行首的文本</td></tr><tr><td>Alt-d</td><td>剪切从光标位置到词尾的文本</td></tr><tr><td>Alt-Backspace(Mac 使用 Alt-delete)</td><td>剪切从光标位置到词头的文本。如果光标在一个单词的开头，剪切前一个单词</td></tr><tr><td>Ctrl-y</td><td>把剪切环中的文本粘贴到光标位置</td></tr></tbody></table><h2 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h2><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>Tab</td><td>自动补全</td></tr><tr><td>Alt-?</td><td>显示可能的自动补全列表。在大多数系统中，你也可以完成这个通过按 两次 tab 键，这会更容易些</td></tr><tr><td>Alt-*</td><td>插入所有可能的自动补全。当你想要使用多个可能的匹配项时，这个很有帮助</td></tr></tbody></table><h2 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h2><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>Ctrl-p</td><td>移动到上一个历史条目。类似于上箭头按键</td></tr><tr><td>Ctrl-n</td><td>移动到下一个历史条目。类似于下箭头按键</td></tr><tr><td>Alt-&lt;</td><td>移动到历史列表开头</td></tr><tr><td>Alt-&gt;</td><td>移动到历史列表结尾，即当前命令行</td></tr><tr><td>Ctrl-r</td><td>反向递增搜索。从当前命令行开始，向上递增搜索</td></tr><tr><td>Alt-p</td><td>反向搜索，不是递增顺序。输入要查找的字符串，然后按下 Enter，执行搜索</td></tr><tr><td>Alt-n</td><td>向前搜索，非递增顺序</td></tr><tr><td>Ctrl-o</td><td>执行历史列表中的当前项，并移到下一个。如果你想要执行历史列表中一系列的命令，这很方便</td></tr></tbody></table><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="http://billie66.github.io/TLCL/book/chap09.html" target="_blank" rel="external">快乐的 Linux 命令行 – 键盘高级操作技巧</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;开发过程中经常会使用到命令行，有很多命令行快捷键可以很方便的提高我们的工作效率。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://woodenrobot.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Shell" scheme="http://woodenrobot.me/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>使用 Git 拉取远程仓库分支到本地分支</title>
    <link href="http://woodenrobot.me/2018/02/09/%E4%BD%BF%E7%94%A8-Git-%E6%8B%89%E5%8F%96%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%88%86%E6%94%AF%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF/"/>
    <id>http://woodenrobot.me/2018/02/09/使用-Git-拉取远程仓库分支到本地分支/</id>
    <published>2018-02-09T09:04:25.000Z</published>
    <updated>2018-08-22T08:47:39.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b xxx(本地分支名) yyy(远程仓库名)/zzz(远程仓库分支名)</div></pre></td></tr></table></figure><p>该方法会将远程仓库 yyy 的 zzz 分支拉取到本地新建分支 xxx，并自动切换到本地分支 xxx。<br><strong>注意：该方法创建的本地分支 xxx 会和远程仓库 yyy 的 zzz 分支建立映射关系</strong></p><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git fetch yyy(远程仓库名) zzz(远程仓库分支名):xxx(本地分支名)</div></pre></td></tr></table></figure><p>该方法会将远程仓库 yyy 的 zzz 分支拉取到本地新建分支 xxx，但不会自动切换到本地分支 xxx。<br><strong>注意：该方法创建的本地分支 xxx 不会和远程仓库 yyy 的 zzz 分支建立映射关系</strong><br><a id="more"></a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://blog.csdn.net/tterminator/article/details/52225720" target="_blank" rel="external">git拉取远程分支并创建本地分支</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git checkout -b xxx(本地分支名) yyy(远程仓库名)/zzz(远程仓库分支名)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该方法会将远程仓库 yyy 的 zzz 分支拉取到本地新建分支 xxx，并自动切换到本地分支 xxx。&lt;br&gt;&lt;strong&gt;注意：该方法创建的本地分支 xxx 会和远程仓库 yyy 的 zzz 分支建立映射关系&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;方法二&quot;&gt;&lt;a href=&quot;#方法二&quot; class=&quot;headerlink&quot; title=&quot;方法二&quot;&gt;&lt;/a&gt;方法二&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git fetch yyy(远程仓库名) zzz(远程仓库分支名):xxx(本地分支名)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该方法会将远程仓库 yyy 的 zzz 分支拉取到本地新建分支 xxx，但不会自动切换到本地分支 xxx。&lt;br&gt;&lt;strong&gt;注意：该方法创建的本地分支 xxx 不会和远程仓库 yyy 的 zzz 分支建立映射关系&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://woodenrobot.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Git" scheme="http://woodenrobot.me/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB 使用系列（一）-- 安装</title>
    <link href="http://woodenrobot.me/2018/02/03/MongoDB-%E4%BD%BF%E7%94%A8%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89-%E5%AE%89%E8%A3%85/"/>
    <id>http://woodenrobot.me/2018/02/03/MongoDB-使用系列（一）-安装/</id>
    <published>2018-02-03T07:04:18.000Z</published>
    <updated>2018-02-03T07:19:15.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>系统：Ubuntu 16.04</li><li>MongoDB 版本：3.6<a id="more"></a></li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="添加软件源"><a href="#添加软件源" class="headerlink" title="添加软件源"></a>添加软件源</h2><p>1.添加 MongoDB 签名到 APT<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927</div></pre></td></tr></table></figure></p><p>2.创建/etc/apt/sources.list.d/mongodb-org-3.6.list文件并写入命令  </p><p>Ubuntu 14.04<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ echo &quot;deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.6 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.6.list</div></pre></td></tr></table></figure></p><p>Ubuntu 16.04<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ echo &quot;deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.6 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.6.list</div></pre></td></tr></table></figure></p><p>由于官方镜像下载速度过慢可采用国内镜像进行安装：</p><p>Ubuntu 14.04<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;deb http://mirrors.aliyun.com/mongodb/apt/ubuntu trusty/mongodb-org/3.6 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.6.list</div></pre></td></tr></table></figure></p><p>Ubuntu 16.04<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;deb http://mirrors.aliyun.com/mongodb/apt/ubuntu xenial/mongodb-org/3.6 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.6.list</div></pre></td></tr></table></figure></p><h2 id="更新软件源列表"><a href="#更新软件源列表" class="headerlink" title="更新软件源列表"></a>更新软件源列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get update</div></pre></td></tr></table></figure><h2 id="安装-MongoDB"><a href="#安装-MongoDB" class="headerlink" title="安装 MongoDB"></a>安装 MongoDB</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install -y mongodb-org</div></pre></td></tr></table></figure><h2 id="运行-MongoDB"><a href="#运行-MongoDB" class="headerlink" title="运行 MongoDB"></a>运行 MongoDB</h2><p>1.启动 MongoDB<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service mongod start</div></pre></td></tr></table></figure></p><p>2.通过日志确认 MongoDB 启动成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ tail -10f /var/log/mongodb/mongod.log</div></pre></td></tr></table></figure></p><p>看到下列内容则为启动成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[initandlisten] waiting for connections on port 27017</div></pre></td></tr></table></figure></p><p>3.关闭 MongoDB<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo service mongod stop</div></pre></td></tr></table></figure></p><p>4.重启 MongoDB<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo service mongod restart</div></pre></td></tr></table></figure></p><p>5.查看 MongoDB 状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo service mongod status</div></pre></td></tr></table></figure></p><h2 id="MongoDB-数据、日志及配置文件默认存放路径"><a href="#MongoDB-数据、日志及配置文件默认存放路径" class="headerlink" title="MongoDB 数据、日志及配置文件默认存放路径"></a>MongoDB 数据、日志及配置文件默认存放路径</h2><ol><li>数据默认存放路径：<code>/var/lib/mongodb</code></li><li>日志默认存放路径：<code>/var/log/mongodb</code></li><li>配置文件默认存放路径: <code>/etc/mongod.conf</code></li></ol><h2 id="用户权限设置"><a href="#用户权限设置" class="headerlink" title="用户权限设置"></a>用户权限设置</h2><h3 id="添加管理员账号"><a href="#添加管理员账号" class="headerlink" title="添加管理员账号"></a>添加管理员账号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$ mongo</div><div class="line">MongoDB shell version v3.6.2</div><div class="line">connecting to: mongodb://127.0.0.1:27017</div><div class="line">MongoDB server version: 3.6.2</div><div class="line">&gt; use admin </div><div class="line">&gt; db.createUser(</div><div class="line">   &#123;</div><div class="line">     user: &quot;admin&quot;,</div><div class="line">     pwd: &quot;mongodb123456&quot;,</div><div class="line">     roles: [ &#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125; ]</div><div class="line">   &#125;</div><div class="line">)</div><div class="line">Successfully added user: &#123;</div><div class="line">    &quot;user&quot; : &quot;admin&quot;,</div><div class="line">    &quot;roles&quot; : [</div><div class="line">        &#123;</div><div class="line">            &quot;role&quot; : &quot;userAdminAnyDatabase&quot;,</div><div class="line">            &quot;db&quot; : &quot;admin&quot;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="在配置文件中开启权限验证"><a href="#在配置文件中开启权限验证" class="headerlink" title="在配置文件中开启权限验证"></a>在配置文件中开启权限验证</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo vim /etc/mongod.conf</div></pre></td></tr></table></figure><p>在配置文件中加入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">security:</div><div class="line">  authorization: enabled</div></pre></td></tr></table></figure></p><h3 id="重启-MongoDB-服务"><a href="#重启-MongoDB-服务" class="headerlink" title="重启 MongoDB 服务"></a>重启 MongoDB 服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo service mongod restart</div></pre></td></tr></table></figure><h3 id="验证权限是否生效"><a href="#验证权限是否生效" class="headerlink" title="验证权限是否生效"></a>验证权限是否生效</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">$ mongo</div><div class="line">MongoDB shell version v3.6.2</div><div class="line">connecting to: mongodb://127.0.0.1:27017</div><div class="line">MongoDB server version: 3.6.2</div><div class="line">&gt; show dbs</div><div class="line">2018-02-01T14:39:46.976+0800 E QUERY    [thread1] Error: listDatabases failed:&#123;</div><div class="line">&quot;ok&quot; : 0,</div><div class="line">&quot;errmsg&quot; : &quot;not authorized on admin to execute command &#123; listDatabases: 1.0, $db: \&quot;admin\&quot; &#125;&quot;,</div><div class="line">&quot;code&quot; : 13,</div><div class="line">&quot;codeName&quot; : &quot;Unauthorized&quot;</div><div class="line">&#125; :</div><div class="line">_getErrorWithCode@src/mongo/shell/utils.js:25:13</div><div class="line">Mongo.prototype.getDBs@src/mongo/shell/mongo.js:65:1</div><div class="line">shellHelper.show@src/mongo/shell/utils.js:813:19</div><div class="line">shellHelper@src/mongo/shell/utils.js:703:15</div><div class="line">@(shellhelp2):1:1</div><div class="line">&gt; use admin</div><div class="line">switched to db admin</div><div class="line">&gt; db.auth(&apos;admin&apos;, &apos;mongodb123456&apos;)</div><div class="line">1</div><div class="line">&gt; show dbs</div><div class="line">admin   0.000GB</div><div class="line">config  0.000GB</div><div class="line">local   0.000GB</div></pre></td></tr></table></figure><h3 id="添加普通用户"><a href="#添加普通用户" class="headerlink" title="添加普通用户"></a>添加普通用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&gt; use spiders</div><div class="line">switched to db spiders</div><div class="line">&gt; db.createUser(</div><div class="line">... &#123;</div><div class="line">...    user: &quot;spiders&quot;,</div><div class="line">...    pwd: &quot;spiders@2018&quot;,</div><div class="line">...    roles: [&#123; role: &quot;readWrite&quot;, db: &quot;spiders&quot; &#125;]</div><div class="line">... &#125;</div><div class="line">... )</div><div class="line">Successfully added user: &#123;</div><div class="line">&quot;user&quot; : &quot;spiders&quot;,</div><div class="line">&quot;roles&quot; : [</div><div class="line">&#123;</div><div class="line">&quot;role&quot; : &quot;readWrite&quot;,</div><div class="line">&quot;db&quot; : &quot;spiders&quot;</div><div class="line">&#125;</div><div class="line">]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>成功添加一个普通用户：</p><ul><li>用户名：spiders</li><li>密码：spiders@2018</li><li>权限：读写 spiders 数据库</li></ul><h3 id="内建角色"><a href="#内建角色" class="headerlink" title="内建角色"></a>内建角色</h3><p>1.角色介绍</p><ul><li>数据库用户角色：read、readWrite</li><li>数据库管理角色：dbAdmin、dbOwner、userAdmin</li><li>集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager</li><li>备份恢复角色：backup、restore</li><li>所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase</li><li>超级用户角色：root // 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）</li><li>内部角色：__system</li></ul><p>2.角色说明  </p><ul><li>Read：允许用户读取指定数据库</li><li>readWrite：允许用户读写指定数据库</li><li>dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问 system.profile</li><li>userAdmin：允许用户向 system.users 集合写入，可以找指定数据库里创建、删除和管理用户</li><li>clusterAdmin：只在 admin 数据库中可用，赋予用户所有分片和复制集相关函数的管理权限</li><li>readAnyDatabase：只在 admin 数据库中可用，赋予用户所有数据库的读权限</li><li>readWriteAnyDatabase：只在 admin 数据库中可用，赋予用户所有数据库的读写权限</li><li>userAdminAnyDatabase：只在 admin 数据库中可用，赋予用户所有数据库的 userAdmin 权限</li><li>dbAdminAnyDatabase：只在 admin 数据库中可用，赋予用户所有数据库的 dbAdmin 权限</li><li>root：只在 admin 数据库中可用。超级账号，超级权限</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://docs.mongodb.com/manual/tutorial/getting-started/" target="_blank" rel="external">MongoDB 官方文档</a></li><li><a href="https://www.jianshu.com/p/a4e94bb8a052" target="_blank" rel="external">如何对MongoDB 3.2.7进行用户权限管理配置</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;系统：Ubuntu 16.04&lt;/li&gt;
&lt;li&gt;MongoDB 版本：3.6
    
    </summary>
    
      <category term="技术" scheme="http://woodenrobot.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="MongoDB" scheme="http://woodenrobot.me/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Mac OS 与 VirtualBox 中的 Ubuntu 共享剪切板</title>
    <link href="http://woodenrobot.me/2018/02/01/Mac-OS-%E4%B8%8E-VirtualBox-%E4%B8%AD%E7%9A%84-Ubuntu-%E5%85%B1%E4%BA%AB%E5%89%AA%E5%88%87%E6%9D%BF/"/>
    <id>http://woodenrobot.me/2018/02/01/Mac-OS-与-VirtualBox-中的-Ubuntu-共享剪切板/</id>
    <published>2018-02-01T01:56:39.000Z</published>
    <updated>2018-02-01T01:59:07.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p><img src="http://7xrwo7.com1.z0.glb.clouddn.com/Mac%20OS%20%E4%B8%8E%20VirtualBox%20%E4%B8%AD%E7%9A%84%20Ubuntu%20%E5%85%B1%E4%BA%AB%E5%89%AA%E5%88%87%E6%9D%BF1.png" alt=""><br>首先设置双向共享剪切板，然后：</p><ul><li>启动虚拟机, 然后在点击的虚拟机的窗口菜单上的Devices &gt; Insert Guest Addtjions CD image…</li><li>虚拟机中弹出对话框, 点击运行  </li></ul><p>安装失败再次安装出现下方错误：<br><img src="http://7xrwo7.com1.z0.glb.clouddn.com/Mac%20OS%20%E4%B8%8E%20VirtualBox%20%E4%B8%AD%E7%9A%84%20Ubuntu%20%E5%85%B1%E4%BA%AB%E5%89%AA%E5%88%87%E6%9D%BF2.png" alt=""></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>在 Ubuntu 虚拟机终端运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install virtualbox-guest-utils</div></pre></td></tr></table></figure></p><p>安装完成后重启虚拟机即可与Mac OS 共享剪切板。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://askubuntu.com/questions/573596/unable-to-install-guest-additions-cd-image-on-virtual-box" target="_blank" rel="external">Unable to Install Guest Additions CD Image on Virtual Box</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xrwo7.com1.z0.glb.clouddn.com/Mac%20OS%20%E4%B8%8E%2
      
    
    </summary>
    
      <category term="技术" scheme="http://woodenrobot.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="VirtualBox" scheme="http://woodenrobot.me/tags/VirtualBox/"/>
    
  </entry>
  
  <entry>
    <title>取消 SSH 私钥密码</title>
    <link href="http://woodenrobot.me/2018/01/30/%E5%8F%96%E6%B6%88-SSH-%E7%A7%81%E9%92%A5%E5%AF%86%E7%A0%81/"/>
    <id>http://woodenrobot.me/2018/01/30/取消-SSH-私钥密码/</id>
    <published>2018-01-30T03:54:52.000Z</published>
    <updated>2018-01-30T06:07:10.247Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>生成 SSH 秘钥时，会让你输入私钥的密码，直接回车则意为不设密码，如果设置了私钥密码，每次使用 SSH 进行操作都需要输入私钥密码。虽然这样增加了安全性，但是使用 SSH 的目的很多时候就是想更加方便，跳过输入账号密码这一步。只要保存好自己的私钥不泄露，一般不设私钥密码是没有太大的风险的。如果已经生成带密码的私钥，又想取消密码可以按下列两种方法操作。<br><a id="more"></a></p><h1 id="取消-SSH-私钥密码"><a href="#取消-SSH-私钥密码" class="headerlink" title="取消 SSH 私钥密码"></a>取消 SSH 私钥密码</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>使用 ssh-keygen 命令更改 SSH Key 密码，进入秘钥所在到的文件夹内（一般为<code>~/.ssh</code>）,执行下列命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -f id_rsa -p</div></pre></td></tr></table></figure></p><p>执行命令后，会让你先输入旧密码，然后输入两次新密码，新密码为空则为没有密码。</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>1.使用openssl命令去掉私钥的密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl rsa -in ~/.ssh/id_rsa -out ~/.ssh/id_rsa_new</div></pre></td></tr></table></figure></p><p>2.备份旧私钥<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv ~/.ssh/id_rsa ~/.ssh/id_rsa.backup</div></pre></td></tr></table></figure></p><p>3.使用新私钥<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv ~/.ssh/id_rsa_new ~/.ssh/id_rsa</div></pre></td></tr></table></figure></p><p>4.设置权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 600 ~/.ssh/id_rsa</div></pre></td></tr></table></figure></p><p>推荐使用方法一来取消 SSH 私钥密码。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://www.cyberciti.biz/faq/howto-ssh-changing-passphrase/" target="_blank" rel="external">OpenSSH Change a Passphrase With ssh-keygen command</a></li><li><a href="http://www.au92.com/archives/remove-passphrase-password-from-private-rsa-key.html" target="_blank" rel="external">SSH私钥取消密码（passphrase ）</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;生成 SSH 秘钥时，会让你输入私钥的密码，直接回车则意为不设密码，如果设置了私钥密码，每次使用 SSH 进行操作都需要输入私钥密码。虽然这样增加了安全性，但是使用 SSH 的目的很多时候就是想更加方便，跳过输入账号密码这一步。只要保存好自己的私钥不泄露，一般不设私钥密码是没有太大的风险的。如果已经生成带密码的私钥，又想取消密码可以按下列两种方法操作。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://woodenrobot.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ssh" scheme="http://woodenrobot.me/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>回归正轨的 2017 年</title>
    <link href="http://woodenrobot.me/2018/01/01/%E5%9B%9E%E5%BD%92%E6%AD%A3%E8%BD%A8%E7%9A%84-2017-%E5%B9%B4/"/>
    <id>http://woodenrobot.me/2018/01/01/回归正轨的-2017-年/</id>
    <published>2018-01-01T04:54:37.000Z</published>
    <updated>2018-01-01T06:03:10.518Z</updated>
    
    <content type="html"><![CDATA[<p>2017 年在观看 REAL - Original Generation 街舞比赛后画上了句号。<br><img src="http://7xraal.com1.z0.glb.clouddn.com/2018WechatIMG58.jpeg" alt=""><br><a id="more"></a></p><hr><p>回顾 2017 年：<br>这一年阅读量急剧下降从 2016 年的 37 本书下降到 9 本。<br><img src="http://7xraal.com1.z0.glb.clouddn.com/2018books.png" alt=""><br><img src="http://7xraal.com1.z0.glb.clouddn.com/2018books1.png" alt=""><br>这一年看了 49 部影视剧相比去年减少 6 部。<br><img src="http://7xraal.com1.z0.glb.clouddn.com/2018test.png" alt=""><br><img src="http://7xraal.com1.z0.glb.clouddn.com/2018movies2.png" alt=""><br>这一年看了 26 部纪录片相比去年减少 16 部。<br><img src="http://7xraal.com1.z0.glb.clouddn.com/2018jilu.png" alt=""><br>这一年在成都又买了自行车骑了三次行。<br><img src="http://7xraal.com1.z0.glb.clouddn.com/2018WechatIMG62.png" alt=""><br><img src="http://7xraal.com1.z0.glb.clouddn.com/2018WechatIMG61.png" alt=""><br><img src="http://7xraal.com1.z0.glb.clouddn.com/2018WechatIMG63.png" alt=""><br>这一年买了 MacBook Pro、机械键盘、重新拾起了街舞办了张年卡 Keep on dancing!<br><img src="http://7xraal.com1.z0.glb.clouddn.com/2018mmexport1514785967909.jpg" alt=""><br><img src="http://7xraal.com1.z0.glb.clouddn.com/2018C360_2017-12-18-15-40-20-585.jpg" alt=""><br>2017 所有的事都在往好的地方开始发展了，2016年曾经的几个梦想也都差不多实现，但也有很多不足的地方。2018 年先从早睡早起开始保护革命的本钱，提高对时间的利用率，撸起袖子加油干！愿我们每一个人在 2018 年都能成为一个有趣的人。Life is short, should be fun!<br>最后感谢如家、红旗连锁、中国移动、易方达基金告诉我，按照阳历我又老了一岁！（Ps:排名按照发短信的时间!）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017 年在观看 REAL - Original Generation 街舞比赛后画上了句号。&lt;br&gt;&lt;img src=&quot;http://7xraal.com1.z0.glb.clouddn.com/2018WechatIMG58.jpeg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://woodenrobot.me/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>懒人神器 autoenv</title>
    <link href="http://woodenrobot.me/2017/11/16/%E6%87%92%E4%BA%BA%E7%A5%9E%E5%99%A8-autoenv/"/>
    <id>http://woodenrobot.me/2017/11/16/懒人神器-autoenv/</id>
    <published>2017-11-16T04:55:07.000Z</published>
    <updated>2017-11-16T04:56:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>每次去不同的项目下运行程序都要更改相对应的 Python 环境，那么有什么办法可以省去这繁琐的一步吗？答案肯定是有的，Kenneth Reitz 已经为我们实现了—— autoenv。这个人名你可能没见过，但是说起他的另一个身份你肯定知道—— <a href="http://docs.python-requests.org/en/master/" target="_blank" rel="external">Requests</a> 库的作者。<br><a id="more"></a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Mac-OS-X-使用-Homebrew-安装"><a href="#Mac-OS-X-使用-Homebrew-安装" class="headerlink" title="Mac OS X 使用 Homebrew 安装"></a>Mac OS X 使用 Homebrew 安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ brew install autoenv</div><div class="line"># bash 使用这条命令</div><div class="line">$ echo &quot;source $(brew --prefix autoenv)/activate.sh&quot; &gt;&gt; ~/.bash_profile</div><div class="line"># zsh 使用这条命令</div><div class="line">$ echo &quot;source $(brew --prefix autoenv)/activate.sh&quot; &gt;&gt; ~/.zshrc</div></pre></td></tr></table></figure><h2 id="使用-pip-安装"><a href="#使用-pip-安装" class="headerlink" title="使用 pip 安装"></a>使用 pip 安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ pip install autoenv</div><div class="line"># bash 使用这条命令</div><div class="line">$ echo &quot;source `which activate.sh`&quot; &gt;&gt; ~/.bashrc</div><div class="line"># zsh 使用这条命令</div><div class="line">$ echo &quot;source `which activate.sh`&quot; &gt;&gt; ~/.zshrc</div></pre></td></tr></table></figure><h2 id="使用-git-安装"><a href="#使用-git-安装" class="headerlink" title="使用 git 安装"></a>使用 git 安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git clone git://github.com/kennethreitz/autoenv.git ~/.autoenv</div><div class="line"># bash 使用这条命令</div><div class="line">$ echo &apos;source ~/.autoenv/activate.sh&apos; &gt;&gt; ~/.bashrc</div><div class="line"># zsh 使用这条命令</div><div class="line">$ echo &apos;source ~/.autoenv/activate.sh&apos; &gt;&gt; ~/.zshrc</div></pre></td></tr></table></figure><p>安装完成后重新打开 shell 生效。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="virtualenvwrapper"><a href="#virtualenvwrapper" class="headerlink" title="virtualenvwrapper"></a>virtualenvwrapper</h2><p>通过下列命令在项目所在文件夹 project 内新建<code>.env</code>文件，并在改文件内写入进入项目环境的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;workon test&quot; &gt; project/.env</div></pre></td></tr></table></figure><p>上述命令以在 project (项目文件夹)内进入 virtualenvwrapper 创建的 test 虚拟环境为例，如何使用 virtualenvwrapper 可参考<a href="https://zhuanlan.zhihu.com/p/30859003" target="_blank" rel="external">virtualenvwrapper + pyenv 打造多版本 Python 环境</a>。  </p><h2 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h2><p>如果你使用的是 virtualenv 那么命令应该是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;source venv/bin/activate&quot; &gt; project/.env</div></pre></td></tr></table></figure></p><p>上述命令以在 project (项目文件夹)内进入 virtualenv 创建的位于 project (项目文件夹)内的 venv 环境为例。<br><img src="https://camo.githubusercontent.com/92a0e6c8cfa3aae0e70f442fc915263ee59bf5bf/687474703a2f2f6d656469612e74756d626c722e636f6d2f74756d626c725f6c74757a6a766251364c31717a677078392e676966" alt=""><br><code>cd project</code>进入项目文件夹尽情享受 autoenv 带来的便利吧！</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>最后献上 Kenneth Reitz 大神的美照！<br><img src="http://7xraal.com1.z0.glb.clouddn.com/autoenvrequests2.jpg" alt=""></p><p>前<br>方<br>高<br>能<br>！<br>！<br>！<br>！<br>！<br>！<br>！<br>！<br>！<br>！<br>！<br>减<br>肥<br>后<br>是<br>这<br>样<br>的<br>！<br>！<br>！<br>！<br>！<br>！<br>！<br>！<br>！<br>！<br>！<br><img src="http://7xraal.com1.z0.glb.clouddn.com/autoenvrequests3.jpg" alt=""><br><img src="http://7xraal.com1.z0.glb.clouddn.com/autoenvrequests.jpg" alt=""></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://github.com/kennethreitz/autoenv" target="_blank" rel="external">autoenv</a></li><li><a href="https://www.kennethreitz.org/" target="_blank" rel="external">Kenneth Reitz</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;每次去不同的项目下运行程序都要更改相对应的 Python 环境，那么有什么办法可以省去这繁琐的一步吗？答案肯定是有的，Kenneth Reitz 已经为我们实现了—— autoenv。这个人名你可能没见过，但是说起他的另一个身份你肯定知道—— &lt;a href=&quot;http://docs.python-requests.org/en/master/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Requests&lt;/a&gt; 库的作者。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://woodenrobot.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://woodenrobot.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>virtualenvwrapper + pyenv 打造多版本 Python 环境</title>
    <link href="http://woodenrobot.me/2017/11/08/virtualenvwrapper-pyenv-%E6%89%93%E9%80%A0%E5%A4%9A%E7%89%88%E6%9C%AC-Python-%E7%8E%AF%E5%A2%83/"/>
    <id>http://woodenrobot.me/2017/11/08/virtualenvwrapper-pyenv-打造多版本-Python-环境/</id>
    <published>2017-11-08T09:24:28.000Z</published>
    <updated>2018-07-12T06:31:17.108Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>面对多个 Python 开发项目时，需要针对不同的项目创建相应的开发环境。通常情况下，使用 virtualenv 创建一个虚拟的独立 Python 环境，但是 virtualenv 创建的环境相对分散不便于管理。这里推荐使用 virtualenvwrapper 来创建集中的便于管理的 Python 环境，同时可以结合 pyenv 为不同的项目选定不同的 Python 版本。<br><a id="more"></a></p><h1 id="virtualenvwrapper"><a href="#virtualenvwrapper" class="headerlink" title="virtualenvwrapper"></a>virtualenvwrapper</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>通过 pip 安装 virtualenvwrapper（Ps: 记住加上 sudo）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo pip install virtualenvwrapper</div></pre></td></tr></table></figure></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在.bashrc(或.zshrc)中添加下列内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export WORKON_HOME=$HOME/.virtualenvs</div><div class="line">source /usr/local/bin/virtualenvwrapper.sh</div></pre></td></tr></table></figure></p><p>接着执行`source ~/.bashrc(或./zshrc)。<br><strong>注意：修改.bashrc还是.zshrc取决于你使用的那种 shell。</strong></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li><code>workon</code>: 打印所有的虚拟环境；</li><li><code>mkvirtualenv xxx</code>: 创建 xxx 虚拟环境;</li><li><code>workon xxx</code>: 使用 xxx 虚拟环境;</li><li><code>deactivate</code>: 退出 xxx 虚拟环境；</li><li><code>rmvirtualenv xxx</code>: 删除 xxx 虚拟环境。</li></ul><h1 id="pyenv"><a href="#pyenv" class="headerlink" title="pyenv"></a>pyenv</h1><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>使用下列命令自动安装 pyenv:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash</div></pre></td></tr></table></figure></p><h3 id="Mac-OS-X"><a href="#Mac-OS-X" class="headerlink" title="Mac OS X"></a>Mac OS X</h3><p>使用 homebrew 直接安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ brew update</div><div class="line">$ brew install pyenv</div></pre></td></tr></table></figure></p><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p>在.bashrc(或.zshrc)中添加下列内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export PYENV_ROOT=&quot;$HOME/.pyenv&quot;</div><div class="line">export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;</div><div class="line">eval &quot;$(pyenv init -)&quot;</div></pre></td></tr></table></figure></p><p>然后重启 shell，使配置生效。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ exec &quot;$SHELL&quot;</div></pre></td></tr></table></figure></p><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><p><strong>1.</strong> 查看所有 Python 版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pyenv versions</div></pre></td></tr></table></figure></p><p>执行命令将打印出安装的所有 Python 版本，<code>*</code>表示当前使用的 Python 版本。</p><p><strong>2.</strong> 查询所有可安装的 Python 版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pyenv install -l</div></pre></td></tr></table></figure></p><p><strong>3.</strong> 安装与卸载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pyenv install 2.7.14</div></pre></td></tr></table></figure></p><p>安装 Python 2.7.14 版本。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pyenv uninstall 2.7.14</div></pre></td></tr></table></figure></p><p>卸载 Python 2.7.14 版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pyenv rehash</div></pre></td></tr></table></figure></p><p>创建垫片路径（为所有已安装的可执行文件创建 shims，如：~/.pyenv/versions/<em>/bin/</em>，因此，每当你增删了 Python 版本或带有可执行文件的包（如 pip）以后，都应该执行一次本命令）。</p><p><strong>4.</strong> 设置 Python 版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ pyenv shell 2.7.14  # 设置面向 shell 的 Python 版本，通过设置当前 shell 的 PYENV_VERSION 环境变量的方式。</div><div class="line">$ pyenv local 2.7.14  # 设置 Python 本地版本，通过将版本号写入当前目录下的 .python-version 文件的方式。通过这种方式设置的 Python 版本优先级较 global 高。</div><div class="line">$ pyenv global 2.7.14  # 设置全局的 Python 版本，通过将版本号写入 ~/.pyenv/version 文件的方式。</div></pre></td></tr></table></figure></p><p><strong>注意：</strong> shell &gt; local &gt; global。pyenv 会从当前目录开始向上逐级查找 .python-version 文件，直到根目录为止。若找不到，就用 global 版本。</p><p><strong>Ps: 因为系统本身常常会依赖自带的 python 版本，所以尽量不要修改 global。</strong></p><p><strong>5.</strong> 取消 shell 或 local python 版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ pyenv shell --unset</div><div class="line">$ pyenv local --unset</div></pre></td></tr></table></figure></p><h2 id="使用镜像加速下载"><a href="#使用镜像加速下载" class="headerlink" title="使用镜像加速下载"></a>使用镜像加速下载</h2><p>通过下列脚本使用国内搜狐的镜像快速安装各版本 Python：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">v=3.6.3|wget http://mirrors.sohu.com/python/$v/Python-$v.tar.xz -P $(pyenv root)/cache/;pyenv install $v</div></pre></td></tr></table></figure></p><p><strong>注意：v 为 Python 版本号，请根据需要自行更改。</strong></p><h1 id="pyenv-virtualenvwrapper"><a href="#pyenv-virtualenvwrapper" class="headerlink" title="pyenv-virtualenvwrapper"></a>pyenv-virtualenvwrapper</h1><h2 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h2><h3 id="Linux-1"><a href="#Linux-1" class="headerlink" title="Linux"></a>Linux</h3><p>通过下列命令安装 pyenv-virtualenvwrapper:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/pyenv/pyenv-virtualenvwrapper.git $(pyenv root)/plugins/pyenv-virtualenvwrapper</div></pre></td></tr></table></figure></p><h3 id="Mac-OS-X-1"><a href="#Mac-OS-X-1" class="headerlink" title="Mac OS X"></a>Mac OS X</h3><p>Mac OS X 下可选择使用使用 Homebrew 来安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install pyenv-virtualenvwrapper</div></pre></td></tr></table></figure></p><h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><p>安装完成后使用下列命令激活 pyenv-virtualenvwrapper：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pyenv virtualenvwrapper</div></pre></td></tr></table></figure></p><h2 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ pyenv shell 3.6.3  # 设置当前 shell python 版本为 2.7.14</div><div class="line">$ pip install virtualenvwrapper  # 第一次使用新的 Python 环境需要安装此包，否则创建的虚拟环境 Python 版本仍为系统默认</div><div class="line">$ mkvirtualenv python3  # 创建 python 3.6.3 版本的虚拟环境 python3</div></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://github.com/pyenv/pyenv" target="_blank" rel="external">pyenv 文档</a></li><li><a href="https://virtualenvwrapper.readthedocs.io/en/latest/install.html" target="_blank" rel="external">virtualenvwrapper 文档</a></li><li><a href="https://github.com/pyenv/pyenv-virtualenvwrapper" target="_blank" rel="external">pyenv-virtualenvwrapper 文档</a></li><li><a href="http://einverne.github.io/post/2017/04/pyenv.html" target="_blank" rel="external">使用 pyenv 管理 Python 版本</a></li><li><a href="https://segmentfault.com/a/1190000006174123" target="_blank" rel="external">pyenv 安装配置与国内镜像加速</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;面对多个 Python 开发项目时，需要针对不同的项目创建相应的开发环境。通常情况下，使用 virtualenv 创建一个虚拟的独立 Python 环境，但是 virtualenv 创建的环境相对分散不便于管理。这里推荐使用 virtualenvwrapper 来创建集中的便于管理的 Python 环境，同时可以结合 pyenv 为不同的项目选定不同的 Python 版本。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://woodenrobot.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://woodenrobot.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python + Splinter 实现浏览器自动化操作入门指南</title>
    <link href="http://woodenrobot.me/2017/10/17/Python-Splinter-%E5%AE%9E%E7%8E%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E8%87%AA%E5%8A%A8%E5%8C%96%E6%93%8D%E4%BD%9C%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://woodenrobot.me/2017/10/17/Python-Splinter-实现浏览器自动化操作入门指南/</id>
    <published>2017-10-17T12:02:34.000Z</published>
    <updated>2017-10-17T12:04:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Splinter 是用 Python 开发的一个开源web自动化测试的工具集。 它可以帮你自动化浏览器的行为，比如浏览 URLs 并和页面进行交互。<br><a id="more"></a></p><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>从终端运行：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install splinter</div></pre></td></tr></table></figure></p><h3 id="安装相应的浏览器驱动"><a href="#安装相应的浏览器驱动" class="headerlink" title="安装相应的浏览器驱动"></a>安装相应的浏览器驱动</h3><p>Chrome浏览器驱动：<a href="https://sites.google.com/a/chromium.org/chromedriver/downloads" target="_blank" rel="external">https://sites.google.com/a/chromium.org/chromedriver/downloads</a><br>Firefox浏览器驱动：<a href="https://github.com/mozilla/geckodriver/releases" target="_blank" rel="external">https://github.com/mozilla/geckodriver/releases</a><br>根据相应的浏览器下载对应的驱动版本，并将驱动所在的路径加入环境变量。</p><h3 id="创建一个-Browser-实例"><a href="#创建一个-Browser-实例" class="headerlink" title="创建一个 Browser 实例"></a>创建一个 Browser 实例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> splinter <span class="keyword">import</span> Browser</div><div class="line">browser = Browser()</div><div class="line"><span class="comment"># 指定driver为chrome浏览器</span></div><div class="line"><span class="comment"># browser = Browser(driver_name='chrome')</span></div></pre></td></tr></table></figure><p><strong>提示</strong>: 如果你不为 Browser 指定 driver, 那么会默认使用 firefox。</p><h3 id="访问百度搜索页面"><a href="#访问百度搜索页面" class="headerlink" title="访问百度搜索页面"></a>访问百度搜索页面</h3><p>使用 <code>browser.visit</code> 方法可访问任意网站. 让我们访问一下百度搜索页面:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">browser.visit(<span class="string">'http://baidu.com'</span>)</div></pre></td></tr></table></figure></p><h3 id="输入搜索关键词"><a href="#输入搜索关键词" class="headerlink" title="输入搜索关键词"></a>输入搜索关键词</h3><p>页面加载完毕后，你能进行一系列的交互，比如点击，输入框填充字段，选择单选按钮和复选框。让我们在百度搜索框中填充 <code>splinter - python acceptance testing for web applications</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">browser.fill(<span class="string">'wd'</span>, <span class="string">'splinter - python acceptance testing for web applications'</span>)</div></pre></td></tr></table></figure></p><h3 id="点击搜索按钮"><a href="#点击搜索按钮" class="headerlink" title="点击搜索按钮"></a>点击搜索按钮</h3><p>告诉 Splinter 哪一个按钮需要点击。这个按钮 - 或任意其他元素 - 可以通过它的css, xpath, id, tag 或 name来识别。  </p><p>通过以下操作找到百度搜索按钮：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">button = browser.find_by_xpath(<span class="string">'//input[@type="submit"]'</span>)</div></pre></td></tr></table></figure></p><p>提示一下，这个 xpath 语法所在的按钮 会在百度搜索页面的源码中被找到。  </p><p>找到按钮后，我们就可以进行点击操作:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">button.click()</div></pre></td></tr></table></figure></p><p>提示: 以上展示的两步可以结合为一行代码，如下所示:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">browser.find_by_xpath(<span class="string">'//input[@type="submit"]'</span>).click()</div></pre></td></tr></table></figure></p><h3 id="查看-Splinter-官方网站是否在搜索结果中"><a href="#查看-Splinter-官方网站是否在搜索结果中" class="headerlink" title="查看 Splinter 官方网站是否在搜索结果中"></a>查看 Splinter 官方网站是否在搜索结果中</h3><p>点击搜索按钮后，你可以通过以下步骤检测 Splinter 官方网站是否在搜索结果中。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> browser.is_text_present(<span class="string">'splinter.readthedocs'</span>):</div><div class="line">    <span class="keyword">print</span> <span class="string">"Yes, found it! :)"</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"No, didn't find it :("</span></div></pre></td></tr></table></figure></p><p>在这个小例子中, 我们只是打印出了结果. 当写测试的时候，你需要使用断言。</p><h3 id="关闭浏览器"><a href="#关闭浏览器" class="headerlink" title="关闭浏览器"></a>关闭浏览器</h3><p>结束测试后，我们需要使用 browser.quit 关闭浏览器:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">browser.quit()</div></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最后完整的代码如下所示:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> splinter <span class="keyword">import</span> Browser</div><div class="line"></div><div class="line">browser = Browser()</div><div class="line">browser.visit(<span class="string">'http://baidu.com'</span>)</div><div class="line">browser.fill(<span class="string">'wd'</span>, <span class="string">'splinter - python acceptance testing for web applications'</span>)</div><div class="line">button = browser.find_by_xpath(<span class="string">'//input[@type="submit"]'</span>).click()</div><div class="line"></div><div class="line"><span class="keyword">if</span> browser.is_text_present(<span class="string">'splinter.readthedocs'</span>):</div><div class="line">    <span class="keyword">print</span> <span class="string">"Yes, the official website was found!"</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"No, it wasn't found... We need to improve our SEO techniques"</span></div><div class="line"></div><div class="line">browser.quit()</div></pre></td></tr></table></figure></p><h1 id="翻译计划"><a href="#翻译计划" class="headerlink" title="翻译计划"></a>翻译计划</h1><p>上述的介绍是来自于我近期翻译的 Splinter 文档中快速上手部分，非常感谢<a href="http://redredleaf.me/" target="_blank" rel="external">一叶染秋</a>加入翻译计划。我们目前只是翻译了一小部分，还有很多没有翻译，如果你想加入翻译计划可以给 Github 上的<a href="https://github.com/Wooden-Robot/splinter-docs-zh_CN" target="_blank" rel="external">Splinter 中文文档项目</a>提交PR，翻译前请先私信我你想翻译的章节，避免大家重复翻译。如果有翻译不对或者不好的地方也欢迎大家多多提建议。</p><h1 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h1><p>最早的时候大家都会使用 Phantomjs 来实现headless，但是多多少少会有一些不足的地方。现在 Chrome 和 Firefox 都已经提供了相应的 headless 模式，而且 Splinter 也已经集成。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> splinter <span class="keyword">import</span> Browser</div><div class="line"></div><div class="line">browser = Browser(driver_name=<span class="string">'chrome'</span>, headless=<span class="keyword">True</span>)</div><div class="line"><span class="comment"># browser = Browser(driver_name='firefox', headless=True)</span></div></pre></td></tr></table></figure></p><p>通过一个简单的参数即可启用 headless 模式，赶快去试试吧！（Ps: 我为这个功能做了一点微小的工作）</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://splinter.readthedocs.io/en/latest/" target="_blank" rel="external">Splinter 官方文档</a></li><li><a href="http://splinter-docs-zh-cn.readthedocs.io/zh/latest/" target="_blank" rel="external">Splinter 中文文档</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Splinter 是用 Python 开发的一个开源web自动化测试的工具集。 它可以帮你自动化浏览器的行为，比如浏览 URLs 并和页面进行交互。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://woodenrobot.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://woodenrobot.me/tags/Python/"/>
    
      <category term="爬虫" scheme="http://woodenrobot.me/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Splinter" scheme="http://woodenrobot.me/tags/Splinter/"/>
    
  </entry>
  
  <entry>
    <title>Tmux入门指南</title>
    <link href="http://woodenrobot.me/2017/07/16/tmux%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://woodenrobot.me/2017/07/16/tmux入门指南/</id>
    <published>2017-07-16T08:17:07.000Z</published>
    <updated>2017-07-16T08:24:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>很多时候我们需要通过SSH连接服务器进行一些操作，费了好长时间调好了程序，一顿饭的功夫SSH超时了(broken pipe)，重新连上去正在运行的程序也都没了，一切又得从头再来。这个时候你就非常需要用到tmux了，用tmux在服务器上创建一个会话（Session），在该会话中进行操作，你可以随时随地断开和重新连接会话（Session），即便是SSH中断了你在远程服务器上的工作状态也可以持久化地保存。<br><a id="more"></a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>tmux 是一个优秀的终端复用器类自由软件，功能类似 GNU Screen，但使用 BSD 许可发布。用户可以通过 tmux 在一个终端内管理多个分离的会话，窗口及面板，对于同时使用多个命令行，或多个任务时非常方便。</p></blockquote><h2 id="功能特性："><a href="#功能特性：" class="headerlink" title="功能特性："></a>功能特性：</h2><blockquote><ul><li>一个虚拟终端可以管理多个会话，窗口和面板</li><li>支持分屏，同时处理多个操作</li><li>窗口、面板可以在会话间自由移动，切换</li><li>丰富灵活的状态行展示</li><li>支持自定义快捷键，依照个人习惯配置令操作更高效</li><li>不受断网影响，避免丢失重要工作进度</li><li>结对编程，方便演示与协作</li><li>自带复制粘贴缓冲区管理</li><li>脚本化配置，可配置多种操作环境<h2 id="层次结构"><a href="#层次结构" class="headerlink" title="层次结构"></a>层次结构</h2><img src="http://7xraal.com1.z0.glb.clouddn.com/tmux%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97tmux1.png" alt=""><br>tmux的主要元素分为三层：</li></ul></blockquote><ul><li>Session 一组窗口的集合，通常用来概括同一个任务。session可以有自己的名字便于任务之间的切换。</li><li>Window 单个可见窗口。Windows有自己的编号，也可以认为和ITerm2中的Tab类似。</li><li>Pane 窗格，被划分成小块的窗口，类似于Vim中 C-w +v 后的效果。</li></ul><h1 id="安装tmux"><a href="#安装tmux" class="headerlink" title="安装tmux"></a>安装tmux</h1><h2 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install tmux</div></pre></td></tr></table></figure><h2 id="Mac-OS安装"><a href="#Mac-OS安装" class="headerlink" title="Mac OS安装"></a>Mac OS安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install tmux</div></pre></td></tr></table></figure><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><p>首先在tmux会话中使用的快捷键都需要一个前缀来激活，前缀默认为Ctrl+b（即：在按快捷键之前需要按一下前缀）。</p><h2 id="查询所有会话（Session）"><a href="#查询所有会话（Session）" class="headerlink" title="查询所有会话（Session）"></a>查询所有会话（Session）</h2><p>在命令行输入下列命令查询当前所有会话。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tmux ls</div></pre></td></tr></table></figure></p><p>你会发现<code>no server running on /private/tmp/tmux-501/default</code>，这是因为我们还没有创建会话（Session）。</p><h2 id="创建会话（Session"><a href="#创建会话（Session" class="headerlink" title="创建会话（Session)"></a>创建会话（Session)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tmux new -s session-name</div></pre></td></tr></table></figure><p>通过上述命令新建一个有特定名称的会话。<br>一般情况下我们不会使用下列命令创建不指定名字的会话。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tmux new</div></pre></td></tr></table></figure></p><h1 id="断开会话（Session）"><a href="#断开会话（Session）" class="headerlink" title="断开会话（Session）"></a>断开会话（Session）</h1><p>使用下列命令断开当前会话（断开会话并不影响会话中运行的程序，断开后还可以重新连接）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tmux detach</div></pre></td></tr></table></figure></p><p>或者使用tmux中的快捷键<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Ctrl+b d(即先使用Ctrl+b快捷键前缀，然后再按d)</div></pre></td></tr></table></figure></p><h1 id="重新连接会话（Session）"><a href="#重新连接会话（Session）" class="headerlink" title="重新连接会话（Session）"></a>重新连接会话（Session）</h1><p>在命令行输入<code>tmux a</code>即可快速连接第一个所有会话中的第一个。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tmux a</div></pre></td></tr></table></figure></p><p>或者通过会话名连接该一个会话<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tmux a -t session-name</div></pre></td></tr></table></figure></p><h1 id="关闭会话"><a href="#关闭会话" class="headerlink" title="关闭会话"></a>关闭会话</h1><p>通过下列命令关闭会话后，会话中的程序也会全部关闭。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tmux kill-session -t session-name</div></pre></td></tr></table></figure></p><p>当然你也可以通过直接按<code>Ctrl+d</code>关闭会话、窗口或窗格。</p><h1 id="tmux中的快捷键参考"><a href="#tmux中的快捷键参考" class="headerlink" title="tmux中的快捷键参考"></a>tmux中的快捷键参考</h1><p>注意以下快捷键适用于tmux会话中，使用前皆需要按下快捷键前缀<code>Ctrl+b</code>。</p><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><ul><li>？ 获取帮助信息</li></ul><h2 id="会话（Session）管理"><a href="#会话（Session）管理" class="headerlink" title="会话（Session）管理"></a>会话（Session）管理</h2><ul><li>s 列出所有会话</li><li>$ 重命名当前的会话</li><li>d 断开当前的会话</li></ul><h2 id="窗口（Window）管理"><a href="#窗口（Window）管理" class="headerlink" title="窗口（Window）管理"></a>窗口（Window）管理</h2><ul><li>c 创建一个新窗口</li><li>, 重命名当前窗口</li><li>w 列出所有窗口</li><li>% 水平分割窗口</li><li>“ 竖直分割窗口</li><li>n 选择下一个窗口</li><li>p 选择上一个窗口</li><li>0~9 选择0~9对应的窗口</li></ul><h2 id="窗格（Pane）管理"><a href="#窗格（Pane）管理" class="headerlink" title="窗格（Pane）管理"></a>窗格（Pane）管理</h2><ul><li>% 创建一个水平窗格</li><li>“ 创建一个竖直窗格</li><li>q 显示窗格的编号</li><li>o 在窗格间切换</li><li>} 与下一个窗格交换位置</li><li>{ 与上一个窗格交换位置</li><li>! 在新窗口中显示当前窗格</li><li>x 关闭当前窗格</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>t 在当前窗格显示时间</li></ul><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ol><li><a href="http://blog.jobbole.com/87278/" target="_blank" rel="external">Tmux 入门介绍</a></li><li><a href="http://blog.jobbole.com/87562/?utm_source=blog.jobbole.com&amp;utm_medium=relatedPosts" target="_blank" rel="external">Tmux：Linux 从业者必备利器</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;很多时候我们需要通过SSH连接服务器进行一些操作，费了好长时间调好了程序，一顿饭的功夫SSH超时了(broken pipe)，重新连上去正在运行的程序也都没了，一切又得从头再来。这个时候你就非常需要用到tmux了，用tmux在服务器上创建一个会话（Session），在该会话中进行操作，你可以随时随地断开和重新连接会话（Session），即便是SSH中断了你在远程服务器上的工作状态也可以持久化地保存。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://woodenrobot.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="tmux" scheme="http://woodenrobot.me/tags/tmux/"/>
    
  </entry>
  
  <entry>
    <title>&lt;转&gt; ssh-keygen 详解</title>
    <link href="http://woodenrobot.me/2017/06/30/ssh-keygen%E8%AF%A6%E8%A7%A3/"/>
    <id>http://woodenrobot.me/2017/06/30/ssh-keygen详解/</id>
    <published>2017-06-30T09:49:58.000Z</published>
    <updated>2018-01-30T04:02:44.641Z</updated>
    
    <content type="html"><![CDATA[<p>文章来源于：<a href="http://linux.chinaunix.net/techdoc/beginner/2010/01/12/1153509.shtml" target="_blank" rel="external">ssh-keygen 中文手册</a></p><h1 id="名称"><a href="#名称" class="headerlink" title="名称"></a>名称</h1><p>ssh-keygen - 生成、管理和转换认证密钥</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">ssh-keygen [-q] [-b bits] -t <span class="built_in">type</span> [-N new_passphrase] [-C comment] [-f output_keyfile]</div><div class="line">ssh-keygen -p [-P old_passphrase] [-N new_passphrase] [-f keyfile]</div><div class="line">ssh-keygen -i [-f input_keyfile]</div><div class="line">ssh-keygen -e [-f input_keyfile]</div><div class="line">ssh-keygen -y [-f input_keyfile]</div><div class="line">ssh-keygen -c [-P passphrase] [-C comment] [-f keyfile]</div><div class="line">ssh-keygen -l [-f input_keyfile]</div><div class="line">ssh-keygen -B [-f input_keyfile]</div><div class="line">ssh-keygen -D reader</div><div class="line">ssh-keygen -F hostname [-f known_hosts_file]</div><div class="line">ssh-keygen -H [-f known_hosts_file]</div><div class="line">ssh-keygen -R hostname [-f known_hosts_file]</div><div class="line">ssh-keygen -U reader [-f input_keyfile]</div><div class="line">ssh-keygen -r hostname [-f input_keyfile] [-g]</div><div class="line">ssh-keygen -G output_file [-v] [-b bits] [-M memory] [-S start_point]</div><div class="line">ssh-keygen -T output_file -f input_file [-v] [-a num_trials] [-W generator]</div></pre></td></tr></table></figure><a id="more"></a><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>ssh-keygen 用于为<a href="http://man.openbsd.org/ssh" target="_blank" rel="external">ssh(1)</a>生成、管理和转换认证密钥，包括 RSA 和 DSA 两种密钥。<br>密钥类型可以用 -t 选项指定。如果没有指定则默认生成用于SSH-2的RSA密钥。<br>ssh-keygen 还可以用来产生 Diffie-Hellman group exchange (DH-GEX) 中使用的素数模数。<br>参见模数和生成小节。<br>一般说来，如果用户希望使用RSA或DSA认证，那么至少应该运行一次这个程序，在 ~/.ssh/identity, ~/.ssh/id_dsa 或 ~/.ssh/id_rsa 文件中创建认证所需的密钥。<br>另外，系统管理员还可以用它产生主机密钥。<br>通常，这个程序产生一个密钥对，并要求指定一个文件存放私钥，同时将公钥存放在附加了”.pub”后缀的同名文件中。<br>程序同时要求输入一个密语字符串(passphrase)，空表示没有密语(主机密钥的密语必须为空)。<br>密语和口令(password)非常相似，但是密语可以是一句话，里面有单词、标点符号、数字、空格或任何你想要的字符。<br>好的密语要30个以上的字符，难以猜出，由大小写字母、数字、非字母混合组成。密语可以用 -p 选项修改。<br>丢失的密语不可恢复。如果丢失或忘记了密语，用户必须产生新的密钥，然后把相应的公钥分发到其他机器上去。<br>RSA1的密钥文件中有一个”注释”字段，可以方便用户标识这个密钥，指出密钥的用途或其他有用的信息。<br>创建密钥的时候，注释域初始化为”user@host”，以后可以用 -c 选项修改。<br>密钥产生后，下面的命令描述了怎样处置和激活密钥。可用的选项有：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">-a trials</div><div class="line">     在使用 -T 对 DH-GEX 候选素数进行安全筛选时需要执行的基本测试数量。</div><div class="line">-B      显示指定的公钥/私钥文件的 bubblebabble 摘要。</div><div class="line">-b bits</div><div class="line">     指定密钥长度。对于RSA密钥，最小要求<span class="number">768</span>位，默认是<span class="number">2048</span>位。DSA密钥必须恰好是<span class="number">1024</span>位(FIPS <span class="number">186</span>-<span class="number">2</span> 标准的要求)。</div><div class="line">-C comment</div><div class="line">     提供一个新注释</div><div class="line">-c      要求修改私钥和公钥文件中的注释。本选项只支持 RSA1 密钥。</div><div class="line">         程序将提示输入私钥文件名、密语(如果存在)、新注释。</div><div class="line">-D reader</div><div class="line">     下载存储在智能卡 reader 里的 RSA 公钥。</div><div class="line">-e      读取OpenSSH的私钥或公钥文件，并以 RFC <span class="number">4716</span> SSH 公钥文件格式在 stdout 上显示出来。</div><div class="line">     该选项能够为多种商业版本的 SSH 输出密钥。</div><div class="line">-F hostname</div><div class="line">     在 known_hosts 文件中搜索指定的 hostname ，并列出所有的匹配项。</div><div class="line">     这个选项主要用于查找散列过的主机名/ip地址，还可以和 -H 选项联用打印找到的公钥的散列值。</div><div class="line">-f filename</div><div class="line">     指定密钥文件名。</div><div class="line">-G output_file</div><div class="line">     为 DH-GEX 产生候选素数。这些素数必须在使用之前使用 -T 选项进行安全筛选。</div><div class="line">-g      在使用 -r 打印指纹资源记录的时候使用通用的 DNS 格式。</div><div class="line">-H      对 known_hosts 文件进行散列计算。这将把文件中的所有主机名/ip地址替换为相应的散列值。</div><div class="line">     原来文件的内容将会添加一个".old"后缀后保存。这些散列值只能被 ssh 和 sshd 使用。</div><div class="line">     这个选项不会修改已经经过散列的主机名/ip地址，因此可以在部分公钥已经散列过的文件上安全使用。</div><div class="line">-i      读取未加密的SSH-<span class="number">2</span>兼容的私钥/公钥文件，然后在 stdout 显示OpenSSH兼容的私钥/公钥。</div><div class="line">     该选项主要用于从多种商业版本的SSH中导入密钥。</div><div class="line">-l      显示公钥文件的指纹数据。它也支持 RSA1 的私钥。</div><div class="line">     对于RSA和DSA密钥，将会寻找对应的公钥文件，然后显示其指纹数据。</div><div class="line">-M memory</div><div class="line">     指定在生成 DH-GEXS 候选素数的时候最大内存用量(MB)。</div><div class="line">-N new_passphrase</div><div class="line">     提供一个新的密语。</div><div class="line">-P passphrase</div><div class="line">     提供(旧)密语。</div><div class="line">-p      要求改变某私钥文件的密语而不重建私钥。程序将提示输入私钥文件名、原来的密语、以及两次输入新密语。</div><div class="line">-q      安静模式。用于在 /etc/rc 中创建新密钥的时候。</div><div class="line">-R hostname</div><div class="line">     从 known_hosts 文件中删除所有属于 hostname 的密钥。</div><div class="line">     这个选项主要用于删除经过散列的主机(参见 -H 选项)的密钥。</div><div class="line">-r hostname</div><div class="line">     打印名为 hostname 的公钥文件的 SSHFP 指纹资源记录。</div><div class="line">-S <span class="built_in">start</span></div><div class="line">     指定在生成 DH-GEX 候选模数时的起始点(<span class="number">16</span>进制)。</div><div class="line">-T output_file</div><div class="line">     测试 Diffie-Hellman group exchange 候选素数(由 -G 选项生成)的安全性。</div><div class="line">-t <span class="built_in">type</span></div><div class="line">     指定要创建的密钥类型。可以使用："rsa1"(SSH-<span class="number">1</span>) "rsa"(SSH-<span class="number">2</span>) "dsa"(SSH-<span class="number">2</span>)</div><div class="line">-U reader</div><div class="line">     把现存的RSA私钥上传到智能卡 reader</div><div class="line">-v      详细模式。ssh-keygen 将会输出处理过程的详细调试信息。常用于调试模数的产生过程。</div><div class="line">     重复使用多个 -v 选项将会增加信息的详细程度(最大<span class="number">3</span>次)。</div><div class="line">-W generator</div><div class="line">     指定在为 DH-GEX 测试候选模数时想要使用的 generator</div><div class="line">-y      读取OpenSSH专有格式的公钥文件，并将OpenSSH公钥显示在 stdout 上。</div></pre></td></tr></table></figure></p><h1 id="模数生成"><a href="#模数生成" class="headerlink" title="模数生成"></a>模数生成</h1><p>ssh-keygen 可以生成用于 Diffie-Hellman Group Exchange (DH-GEX) 协议的 groups。<br>生成过程分为两步：<br>首先，使用一个快速且消耗内存较多的方法生成一些候选素数。然后，对这些素数进行适应性测试(消耗CPU较多)。<br>可以使用 -G 选项生成候选素数，同时使用 -b 选项制定其位数。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ssh-keygen -G moduli-2048.candidates -b 2048</div></pre></td></tr></table></figure></p><p>默认将从指定位数范围内的一个随机点开始搜索素数，不过可以使用 -S 选项来指定这个随机点(16进制)。<br>生成一组候选数之后，接下来就需要使用 -T 选项进行适应性测试。<br>此时 ssh-keygen 将会从 stdin 读取候选素数(或者通过 -f 选项读取一个文件)，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ssh-keygen -T moduli-2048 -f moduli-2048.candidates</div></pre></td></tr></table></figure></p><p>每个候选素数默认都要通过 100 个基本测试(可以通过 -a 选项修改)。<br>DH generator 的值会自动选择，但是你也可以通过 -W 选项强制指定。有效的值可以是： 2, 3, 5<br>经过筛选之后的 DH groups 就可以存放到 /etc/ssh/moduli 里面了。<br>很重要的一点是这个文件必须包括不同长度范围的模数，而且通信双方双方共享相同的模数。  </p><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/.ssh/identity</div></pre></td></tr></table></figure><p>该用户默认的 RSA1 身份认证私钥(SSH-1)。此文件的权限应当至少限制为”600”。<br>生成密钥的时候可以指定采用密语来加密该私钥(3DES)。  </p><p><a href="http://man.openbsd.org/ssh" target="_blank" rel="external">ssh(1)</a>将在登录的时候读取这个文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/.ssh/identity.pub</div></pre></td></tr></table></figure></p><p>该用户默认的 RSA1 身份认证公钥(SSH-1)。此文件无需保密。<br>此文件的内容应该添加到所有 RSA1 目标主机的 ~/.ssh/authorized_keys 文件中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/.ssh/id_dsa</div></pre></td></tr></table></figure></p><p>该用户默认的 DSA 身份认证私钥(SSH-2)。此文件的权限应当至少限制为”600”。<br>生成密钥的时候可以指定采用密语来加密该私钥(3DES)。  </p><p><a href="http://man.openbsd.org/ssh" target="_blank" rel="external">ssh(1)</a>将在登录的时候读取这个文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/.ssh/id_dsa.pub</div></pre></td></tr></table></figure></p><p>该用户默认的 DSA 身份认证公钥(SSH-2)。此文件无需保密。<br>此文件的内容应该添加到所有 DSA 目标主机的 ~/.ssh/authorized_keys 文件中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/.ssh/id_rsa</div></pre></td></tr></table></figure></p><p>该用户默认的 RSA 身份认证私钥(SSH-2)。此文件的权限应当至少限制为”600”。<br>生成密钥的时候可以指定采用密语来加密该私钥(3DES)。  </p><p><a href="http://man.openbsd.org/ssh" target="_blank" rel="external">ssh(1)</a>将在登录的时候读取这个文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">~/.ssh/id_rsa.pub</div><div class="line">``` </div><div class="line">该用户默认的 RSA 身份认证公钥(SSH-2)。此文件无需保密。  </div><div class="line">此文件的内容应该添加到所有 RSA 目标主机的 ~/.ssh/authorized_keys 文件中。</div></pre></td></tr></table></figure></p><p>/etc/ssh/moduli<br>```<br>包含用于 DH-GEX 的 Diffie-Hellman groups。  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文章来源于：&lt;a href=&quot;http://linux.chinaunix.net/techdoc/beginner/2010/01/12/1153509.shtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ssh-keygen 中文手册&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;名称&quot;&gt;&lt;a href=&quot;#名称&quot; class=&quot;headerlink&quot; title=&quot;名称&quot;&gt;&lt;/a&gt;名称&lt;/h1&gt;&lt;p&gt;ssh-keygen - 生成、管理和转换认证密钥&lt;/p&gt;
&lt;h1 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h1&gt;&lt;figure class=&quot;highlight cmd&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ssh-keygen [-q] [-b bits] -t &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt; [-N new_passphrase] [-C comment] [-f output_keyfile]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ssh-keygen -p [-P old_passphrase] [-N new_passphrase] [-f keyfile]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ssh-keygen -i [-f input_keyfile]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ssh-keygen -e [-f input_keyfile]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ssh-keygen -y [-f input_keyfile]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ssh-keygen -c [-P passphrase] [-C comment] [-f keyfile]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ssh-keygen -l [-f input_keyfile]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ssh-keygen -B [-f input_keyfile]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ssh-keygen -D reader&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ssh-keygen -F hostname [-f known_hosts_file]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ssh-keygen -H [-f known_hosts_file]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ssh-keygen -R hostname [-f known_hosts_file]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ssh-keygen -U reader [-f input_keyfile]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ssh-keygen -r hostname [-f input_keyfile] [-g]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ssh-keygen -G output_file [-v] [-b bits] [-M memory] [-S start_point]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ssh-keygen -T output_file -f input_file [-v] [-a num_trials] [-W generator]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://woodenrobot.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ssh" scheme="http://woodenrobot.me/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>用Sphinx快速制作文档</title>
    <link href="http://woodenrobot.me/2017/06/25/%E7%94%A8Sphinx%E5%BF%AB%E9%80%9F%E5%88%B6%E4%BD%9C%E6%96%87%E6%A1%A3/"/>
    <id>http://woodenrobot.me/2017/06/25/用Sphinx快速制作文档/</id>
    <published>2017-06-25T07:24:40.000Z</published>
    <updated>2017-06-25T07:34:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Sphinx 是一种文档工具，它可以令人轻松的撰写出清晰且优美的文档, 由 Georg Brandl 在BSD 许可证下开发. <a href="https://docs.python.org/3/" target="_blank" rel="external">新版的Python文档</a>就是由Sphinx生成的， 并且它已成为Python项目首选的文档工具,同时它对 C/C++ 项目也有很好的支持; 并计划对其它开发语言添加特殊支持. 本站当然也是使用 Sphinx 生成的，它采用reStructuredText! Sphinx还在继续开发. 下面列出了其良好特性,这些特性在Python官方文档中均有体现:</p><ul><li>丰富的输出格式: 支持 HTML (包括 Windows 帮助文档), LaTeX (可以打印PDF版本), manual pages（man 文档）, 纯文本</li><li>完备的交叉引用: 语义化的标签,并可以自动化链接函数,类,引文,术语及相似的片段信息</li><li>明晰的分层结构: 可以轻松的定义文档树,并自动化链接同级/父级/下级文章</li><li>美观的自动索引: 可自动生成美观的模块索引</li><li>精确的语法高亮: 基于 Pygments 自动生成语法高亮</li><li>开放的扩展: 支持代码块的自动测试,并包含Python模块的自述文档(API docs)等  </li></ul><p>Sphinx 使用 reStructuredText 作为标记语言, 可以享有 Docutils 为reStructuredText提供的分析，转换等多种工具.<br><a id="more"></a></p><h1 id="安装Sphinx"><a href="#安装Sphinx" class="headerlink" title="安装Sphinx"></a>安装Sphinx</h1><p>Sphinx为Python语言的一个第三方库。我们需要在终端中输入下列命令进行安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install sphinx</div></pre></td></tr></table></figure></p><h1 id="创建Sphinx项目"><a href="#创建Sphinx项目" class="headerlink" title="创建Sphinx项目"></a>创建Sphinx项目</h1><p>创建一个用于存放文档的文件夹，然后在该文件夹路径下运行下列命令快速生成Sphinx项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sphinx-quickstart</div></pre></td></tr></table></figure></p><p>接下来会让你选择一些配置：</p><ol><li><p>设置文档的根路径（回车，使用默认设置）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Enter the root path for documentation.</div><div class="line">&gt; Root path for the documentation [.]:</div></pre></td></tr></table></figure></li><li><p>是否分离source和build目录（输入y,选择分离，方便管理）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">You have two options for placing the build directory for Sphinx output.</div><div class="line">Either, you use a directory &quot;_build&quot; within the root path, or you separate</div><div class="line">&quot;source&quot; and &quot;build&quot; directories within the root path.</div><div class="line">&gt; Separate source and build directories (y/n) [n]:</div></pre></td></tr></table></figure></li><li><p>设定模板前缀（回车，使用默认选项）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Inside the root directory, two more directories will be created; &quot;_templates&quot;</div><div class="line">for custom HTML templates and &quot;_static&quot; for custom stylesheets and other static</div><div class="line">files. You can enter another prefix (such as &quot;.&quot;) to replace the underscore.</div><div class="line">&gt; Name prefix for templates and static dir [_]:</div></pre></td></tr></table></figure></li><li><p>输入项目名称和作者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The project name will occur in several places in the built documentation.</div><div class="line">&gt; Project name: Sphinx-test</div><div class="line">&gt; Author name(s): test</div></pre></td></tr></table></figure></li><li><p>输入项目版本号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Sphinx has the notion of a &quot;version&quot; and a &quot;release&quot; for the</div><div class="line">software. Each version can have multiple releases. For example, for</div><div class="line">Python the version is something like 2.5 or 3.0, while the release is</div><div class="line">something like 2.5.1 or 3.0a1.  If you don&apos;t need this dual structure,</div><div class="line">just set both to the same value.</div><div class="line">&gt; Project version []: 1.0.0</div><div class="line">&gt; Project release [1.0.0]:</div></pre></td></tr></table></figure></li><li><p>文档语言（回车，默认即可）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">If the documents are to be written in a language other than English,</div><div class="line">you can select a language here by its language code. Sphinx will then</div><div class="line">translate text that it generates into that language.</div><div class="line"></div><div class="line">For a list of supported codes, see</div><div class="line">http://sphinx-doc.org/config.html#confval-language.</div><div class="line">&gt; Project language [en]:</div></pre></td></tr></table></figure></li><li><p>设定文档文就按的后缀</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The file name suffix for source files. Commonly, this is either &quot;.txt&quot;</div><div class="line">or &quot;.rst&quot;.  Only files with this suffix are considered documents.</div><div class="line">&gt; Source file suffix [.rst]:</div></pre></td></tr></table></figure></li><li><p>设定首页名称（回车，选择默认index即可）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">One document is special in that it is considered the top node of the</div><div class="line">&quot;contents tree&quot;, that is, it is the root of the hierarchical structure</div><div class="line">of the documents. Normally, this is &quot;index&quot;, but if your &quot;index&quot;</div><div class="line">document is a custom template, you can also set this to another filename.</div><div class="line">&gt; Name of your master document (without suffix) [index]:</div></pre></td></tr></table></figure></li><li><p>根据需要选择是否开启epub输出(一般用不到，回车默认不开启即可)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Sphinx can also add configuration for epub output:</div><div class="line">&gt; Do you want to use the epub builder (y/n) [n]:</div></pre></td></tr></table></figure></li><li><p>根据需求选择是否开启相应的Sphinx拓展功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Please indicate if you want to use one of the following Sphinx extensions:</div><div class="line">&gt; autodoc: automatically insert docstrings from modules (y/n) [n]: y</div><div class="line">&gt; doctest: automatically test code snippets in doctest blocks (y/n) [n]: y</div><div class="line">&gt; intersphinx: link between Sphinx documentation of different projects (y/n) [n]: y</div><div class="line">&gt; todo: write &quot;todo&quot; entries that can be shown or hidden on build (y/n) [n]: y</div><div class="line">&gt; coverage: checks for documentation coverage (y/n) [n]: y</div><div class="line">&gt; imgmath: include math, rendered as PNG or SVG images (y/n) [n]: y</div><div class="line">&gt; mathjax: include math, rendered in the browser by MathJax (y/n) [n]: y</div><div class="line">Note: imgmath and mathjax cannot be enabled at the same time.</div><div class="line">imgmath has been deselected.</div><div class="line">&gt; ifconfig: conditional inclusion of content based on config values (y/n) [n]: y</div><div class="line">&gt; viewcode: include links to the source code of documented Python objects (y/n) [n]: y</div><div class="line">&gt; githubpages: create .nojekyll file to publish the document on GitHub pages (y/n) [n]: n</div></pre></td></tr></table></figure></li><li><p>创建项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">A Makefile and a Windows command file can be generated for you so that you</div><div class="line">only have to run e.g. `make html&apos; instead of invoking sphinx-build</div><div class="line">directly.</div><div class="line">&gt; Create Makefile? (y/n) [y]: y</div><div class="line">&gt; Create Windows command file? (y/n) [y]: y</div><div class="line"></div><div class="line">Creating file ./conf.py.</div><div class="line">Creating file ./index.rst,.md.</div><div class="line">Creating file ./Makefile.</div><div class="line">Creating file ./make.bat.</div><div class="line"></div><div class="line">Finished: An initial directory structure has been created.</div><div class="line"></div><div class="line">You should now populate your master file ./index.rst,.md and create other documentation</div><div class="line">source files. Use the Makefile to build the docs, like so:</div><div class="line">   make builder</div><div class="line">where &quot;builder&quot; is one of the supported builders, e.g. html, latex or linkcheck.</div></pre></td></tr></table></figure></li></ol><p>项目创建以后目录结构如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── Makefile</div><div class="line">├── build</div><div class="line">├── make.bat</div><div class="line">└── source</div><div class="line">    ├── _static</div><div class="line">    ├── _templates</div><div class="line">    ├── conf.py</div><div class="line">    └── index.rst</div></pre></td></tr></table></figure></p><ul><li><strong>build</strong>:用来存放通过make html生成文档网页文件的目录</li><li><strong>source</strong>：存放用于生成文档的源文件</li><li><strong>conf.py</strong>: Sphinx的配置文件</li><li><strong>index.rst</strong>: 主文档<h1 id="定义文档结构"><a href="#定义文档结构" class="headerlink" title="定义文档结构"></a>定义文档结构</h1>主文档index.rst的主要功能是被转换成欢迎页, 它包含一个目录表（ “table of contents tree”或者 toctree ). Sphinx 主要功能是使用 reStructuredText, 把许多文件组织成一份结构合理的文档.</li></ul><p>toctree指令初始值如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">.. toctree::</div><div class="line">   :maxdepth: 2</div></pre></td></tr></table></figure></p><p>你可以在 content 的位置添加文档列表:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.. toctree::</div><div class="line">   :maxdepth: 2</div><div class="line"></div><div class="line">   tutorial.md</div><div class="line">   ...</div></pre></td></tr></table></figure></p><p>注：文档文件放在与index.rst同级目录下。</p><h1 id="支持markdown文件、更改文档主题"><a href="#支持markdown文件、更改文档主题" class="headerlink" title="支持markdown文件、更改文档主题"></a>支持markdown文件、更改文档主题</h1><p>Spinx本身不支持.md文件生成文档，需要我们使用第三方库recommonmark进行转换。<br>首先分别运行下列命令安装recommonmark与sphinx_rtd_theme库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pip install recommonmark</div><div class="line"></div><div class="line">pip install sphinx_rtd_theme</div></pre></td></tr></table></figure></p><p>安装好，在conf.py中修改下列两个配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">source_suffix = [&apos;.rst&apos;, &apos;.md&apos;, &apos;.MD&apos;]</div><div class="line">html_theme = &apos;sphinx_rtd_theme&apos;</div></pre></td></tr></table></figure></p><p>并新增：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">source_parsers = &#123;</div><div class="line">    &apos;.md&apos;: CommonMarkParser,</div><div class="line">    &apos;.MD&apos;: CommonMarkParser,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="生成文档"><a href="#生成文档" class="headerlink" title="生成文档"></a>生成文档</h1><p>在Sphinx项目所在的文件夹路径下运行下列命令生成文档：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make html</div></pre></td></tr></table></figure></p><p>生成后的文档位于build/html文件夹内，用浏览器打开index.html即可看到生成后的文档。</p><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ol><li><a href="http://zh-sphinx-doc.readthedocs.io/en/latest/index.html" target="_blank" rel="external">Sphinx 使用手册</a></li><li><a href="https://www.ibm.com/developerworks/cn/opensource/os-sphinx-documentation" target="_blank" rel="external">使用 sphinx 制作简洁而又美观的文档</a></li><li><a href="https://www.biaodianfu.com/sphinx-documentation.html" target="_blank" rel="external">使用Sphinx制作说明文档</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Sphinx 是一种文档工具，它可以令人轻松的撰写出清晰且优美的文档, 由 Georg Brandl 在BSD 许可证下开发. &lt;a href=&quot;https://docs.python.org/3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;新版的Python文档&lt;/a&gt;就是由Sphinx生成的， 并且它已成为Python项目首选的文档工具,同时它对 C/C++ 项目也有很好的支持; 并计划对其它开发语言添加特殊支持. 本站当然也是使用 Sphinx 生成的，它采用reStructuredText! Sphinx还在继续开发. 下面列出了其良好特性,这些特性在Python官方文档中均有体现:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;丰富的输出格式: 支持 HTML (包括 Windows 帮助文档), LaTeX (可以打印PDF版本), manual pages（man 文档）, 纯文本&lt;/li&gt;
&lt;li&gt;完备的交叉引用: 语义化的标签,并可以自动化链接函数,类,引文,术语及相似的片段信息&lt;/li&gt;
&lt;li&gt;明晰的分层结构: 可以轻松的定义文档树,并自动化链接同级/父级/下级文章&lt;/li&gt;
&lt;li&gt;美观的自动索引: 可自动生成美观的模块索引&lt;/li&gt;
&lt;li&gt;精确的语法高亮: 基于 Pygments 自动生成语法高亮&lt;/li&gt;
&lt;li&gt;开放的扩展: 支持代码块的自动测试,并包含Python模块的自述文档(API docs)等  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sphinx 使用 reStructuredText 作为标记语言, 可以享有 Docutils 为reStructuredText提供的分析，转换等多种工具.&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://woodenrobot.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://woodenrobot.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy爬虫框架教程（四）-- 抓取AJAX异步加载网页</title>
    <link href="http://woodenrobot.me/2017/04/09/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%EF%BC%88%E5%9B%9B%EF%BC%89-%E6%8A%93%E5%8F%96AJAX%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD%E7%BD%91%E9%A1%B5/"/>
    <id>http://woodenrobot.me/2017/04/09/Scrapy爬虫框架教程（四）-抓取AJAX异步加载网页/</id>
    <published>2017-04-09T07:47:26.000Z</published>
    <updated>2017-04-09T07:48:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/24669128?group_id=834424262096994304" target="_blank" rel="external">Scrapy爬虫框架教程（一）– Scrapy入门</a><br><a href="https://zhuanlan.zhihu.com/p/24769534" target="_blank" rel="external">Scrapy爬虫框架教程（二）– 爬取豆瓣电影TOP250</a><br><a href="https://zhuanlan.zhihu.com/p/25200262" target="_blank" rel="external">Scrapy爬虫框架教程（三）– 调试(Debugging)Spiders</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前一段时间工作太忙一直没有时间继续更新这个教程，最近离职了趁着这段时间充裕赶紧多写点东西。之前我们已经简单了解了对普通网页的抓取，今天我就给大家讲一讲怎么去抓取采用Ajax异步加的网站。</p><a id="more"></a><h1 id="工具和环境"><a href="#工具和环境" class="headerlink" title="工具和环境"></a>工具和环境</h1><ol><li>语言：python 2.7</li><li>IDE： Pycharm</li><li>浏览器：Chrome</li><li>爬虫框架：Scrapy 1.3.3</li></ol><h1 id="什么是AJAX"><a href="#什么是AJAX" class="headerlink" title="什么是AJAX?"></a>什么是AJAX?</h1><blockquote><p>AJAX即“Asynchronous Javascript And XML”（异步JavaScript和XML），是指一种创建交互式网页应用的网页开发技术。  </p><p>AJAX = 异步 JavaScript和XML（标准通用标记语言的子集）。  </p><p>AJAX 是一种用于创建快速动态网页的技术。  </p><p>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p></blockquote><h1 id="两个Chrome插件"><a href="#两个Chrome插件" class="headerlink" title="两个Chrome插件"></a>两个Chrome插件</h1><h2 id="Toggle-JavaScript"><a href="#Toggle-JavaScript" class="headerlink" title="Toggle JavaScript"></a>Toggle JavaScript</h2><p>这个插件可以帮助我们快速直观地检测网页里哪些信息是通过AJAX异步加载而来的，具体怎么用，下面会详细讲解。<br>chrome商店下载地址：<a href="https://chrome.google.com/webstore/detail/toggle-javascript/cidlcjdalomndpeagkjpnefhljffbnlo?utm_source=chrome-app-launcher-info-dialog" target="_blank" rel="external">https://chrome.google.com/webstore/detail/toggle-javascript/cidlcjdalomndpeagkjpnefhljffbnlo?utm_source=chrome-app-launcher-info-dialog</a>(Ps:打不的小伙伴自行百度搜索国内提供chrome插件下载的网站离线安装)</p><h2 id="JSON-handle"><a href="#JSON-handle" class="headerlink" title="JSON-handle"></a>JSON-handle</h2><p>这个插件可以帮我们格式化Json串,从而让我们以一个更友好的方式查看Json内的信息。<br>chrome商店下载地址：<a href="https://chrome.google.com/webstore/detail/json-handle/iahnhfdhidomcpggpaimmmahffihkfnj" target="_blank" rel="external">https://chrome.google.com/webstore/detail/json-handle/iahnhfdhidomcpggpaimmmahffihkfnj</a>(Ps:打不的小伙伴自行百度搜索国内提供chrome插件下载的网站离线安装)</p><h1 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h1><h2 id="分析页面是否采用AJAX"><a href="#分析页面是否采用AJAX" class="headerlink" title="分析页面是否采用AJAX"></a>分析页面是否采用AJAX</h2><p>上次我们拿了豆瓣当做例子，刚好我发现了豆瓣有AJAX异步加载的页面，这次我们就不换了，还拿豆瓣做例子。（逃<br>首先我们打<a href="https://movie.douban.com/typerank?type_name=%E5%8A%A8%E4%BD%9C&amp;type=5&amp;interval_id=100:90&amp;action=" target="_blank" rel="external">开豆瓣电影分类排行榜 - 动作片</a>栏目。<br><img src="http://7xraal.com1.z0.glb.clouddn.com/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%EF%BC%88%E5%9B%9B%EF%BC%89--%20%E6%8A%93%E5%8F%96AJAX%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD%E7%BD%91%E9%A1%B51.1.png" alt=""><br>打开过后你有没有发现什么不一样的地方呢？如果你的网速慢你会发现下面的电影信息是在网页别的部分出现后才慢慢出现的，试着把界面往下滑会不断有新的电影信息更新出来。<br>遇到这种情况初步就可以认定这个页面是采用AJAX异步加载的，你也可以通过右键查看网页源码来鉴别。比如说你右键查看源码ctrl+f搜索这个杀手不太冷这几个字，你会发现源码里没有。<br><img src="http://7xraal.com1.z0.glb.clouddn.com/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%EF%BC%88%E5%9B%9B%EF%BC%89--%20%E6%8A%93%E5%8F%96AJAX%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD%E7%BD%91%E9%A1%B52.png" alt=""><br>上面的方法虽然能用，但是总感觉有点笨。还记得上面推荐的那个chrome插件Toggle JavaScript吗？<br><img src="http://7xraal.com1.z0.glb.clouddn.com/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%EF%BC%88%E5%9B%9B%EF%BC%89--%20%E6%8A%93%E5%8F%96AJAX%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD%E7%BD%91%E9%A1%B53.png" alt=""><br>安好这个插件它就会出现在chrome浏览器的右边，试着轻轻点一下。<br><img src="http://7xraal.com1.z0.glb.clouddn.com/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%EF%BC%88%E5%9B%9B%EF%BC%89--%20%E6%8A%93%E5%8F%96AJAX%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD%E7%BD%91%E9%A1%B54.png" alt=""><br>我的天呐！这么神奇吗？！刚才的电影信息都不见了！还记得AJAX的介绍吗？AJAX = 异步 JavaScript和XML。当我们点击了插件就代表这个我们封禁了JavaScript,这个页面里的JavaScript代码无法执行，那么通过AJAX异步加载而来的信息当然就无法出现了。通过这种方法我们能快速精确地知道哪些信息是异步加载而来的。</p><h2 id="如何抓取AJAX异步加载页面"><a href="#如何抓取AJAX异步加载页面" class="headerlink" title="如何抓取AJAX异步加载页面"></a>如何抓取AJAX异步加载页面</h2><p>对于这种网页我们一般会采用两种方法：</p><ol><li>通过抓包找到AJAX异步加载的请求地址；</li><li>通过使用PhantomJS等无头浏览器执行JS代码后再对网页进行抓取。</li></ol><p>通常情况下我会采用第一种方法，因为使用无头浏览器会大大降低抓取效率，而且第一种方法得到的数据格式往往以Json为主，非常干净。在这里我只讲解第一种方法，第二种方法作为爬虫的终极武器我会在后续的教程中进行讲解。<br>回到我们需要抓取的页面，还记得我说过页面的一个细节吗，下拉更新。进入页面后我们按F12打开chrome浏览器的开发者工具选择Network，然后实现一次下拉更新。<br><img src="http://7xraal.com1.z0.glb.clouddn.com/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%EF%BC%88%E5%9B%9B%EF%BC%89--%20%E6%8A%93%E5%8F%96AJAX%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD%E7%BD%91%E9%A1%B55.png" alt=""><br>你会在Network里发现一个Response为Json格式的请求，仔细看看Json里的内容你会明白这些都是网页上显示的电影信息。右键该请求地址选择Open Link in New Tab,如果你装了JSON-handle插件你会以下面这种更友好的方式查看这个Json串。<br><img src="http://7xraal.com1.z0.glb.clouddn.com/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%EF%BC%88%E5%9B%9B%EF%BC%89--%20%E6%8A%93%E5%8F%96AJAX%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD%E7%BD%91%E9%A1%B56.png" alt=""><br>接着再让我们看一该请求的Header信息。<br><img src="http://7xraal.com1.z0.glb.clouddn.com/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%EF%BC%88%E5%9B%9B%EF%BC%89--%20%E6%8A%93%E5%8F%96AJAX%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD%E7%BD%91%E9%A1%B57.png" alt=""><br>首先我们可以看出这是一个get请求，多看几个下拉请求的地址后你会发现地中的start=xxx在不断变化，每次增加20。所以我们只用更改这个参数就可以实现翻页不断获取新数据(修改其他的参数也会有不同的效果，这里就不一一细说了，留给大家慢慢地探索)。<br>spider代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># @Time     : 2017/4/9 14:32</span></div><div class="line"><span class="comment"># @Author   : woodenrobot</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Request</div><div class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> Spider</div><div class="line"><span class="keyword">from</span> scrapyspider.items <span class="keyword">import</span> DoubanMovieItem</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubanAJAXSpider</span><span class="params">(Spider)</span>:</span></div><div class="line">    name = <span class="string">'douban_ajax'</span></div><div class="line">    headers = &#123;</div><div class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36'</span>,</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></div><div class="line">        url = <span class="string">'https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;start=0&amp;limit=20'</span></div><div class="line">        <span class="keyword">yield</span> Request(url, headers=self.headers)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        datas = json.loads(response.body)</div><div class="line">        item = DoubanMovieItem()</div><div class="line">        <span class="keyword">if</span> datas:</div><div class="line">            <span class="keyword">for</span> data <span class="keyword">in</span> datas:</div><div class="line">                item[<span class="string">'ranking'</span>] = data[<span class="string">'rank'</span>]</div><div class="line">                item[<span class="string">'movie_name'</span>] = data[<span class="string">'title'</span>]</div><div class="line">                item[<span class="string">'score'</span>] = data[<span class="string">'score'</span>]</div><div class="line">                item[<span class="string">'score_num'</span>] = data[<span class="string">'vote_count'</span>]</div><div class="line">                <span class="keyword">yield</span> item</div><div class="line"></div><div class="line">            <span class="comment"># 如果datas存在数据则对下一页进行采集</span></div><div class="line">            page_num = re.search(<span class="string">r'start=(\d+)'</span>, response.url).group(<span class="number">1</span>)</div><div class="line">            page_num = <span class="string">'start='</span> + str(int(page_num)+<span class="number">20</span>)</div><div class="line">            next_url = re.sub(<span class="string">r'start=\d+'</span>, page_num, response.url)</div><div class="line">            <span class="keyword">yield</span> Request(next_url, headers=self.headers)</div></pre></td></tr></table></figure></p><p>在Scrapy工程文件的spiders里写好爬虫文件后在settings.py所在的目录下打开终端运行以下代码就能输出相应的电影数据。<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrapy crawl douban_ajax -o douban_movie.csv</div></pre></td></tr></table></figure></p><p>代码Github地址：<a href="https://github.com/Wooden-Robot/scrapy-tutorial/blob/master/scrapyspider/scrapyspider/spiders/douban_ajax_spider.py" target="_blank" rel="external">https://github.com/Wooden-Robot/scrapy-tutorial/blob/master/scrapyspider/scrapyspider/spiders/douban_ajax_spider.py</a></p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>整片文章主要以介绍思路为主，抓取的站点也只是做示范内容并不重要。授之以鱼不如授之以渔，希望大家可以从这篇教程里学到解决问题的方法与思路。: )</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/24669128?group_id=834424262096994304&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Scrapy爬虫框架教程（一）– Scrapy入门&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/24769534&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Scrapy爬虫框架教程（二）– 爬取豆瓣电影TOP250&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/25200262&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Scrapy爬虫框架教程（三）– 调试(Debugging)Spiders&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前一段时间工作太忙一直没有时间继续更新这个教程，最近离职了趁着这段时间充裕赶紧多写点东西。之前我们已经简单了解了对普通网页的抓取，今天我就给大家讲一讲怎么去抓取采用Ajax异步加的网站。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://woodenrobot.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://woodenrobot.me/tags/Python/"/>
    
      <category term="爬虫" scheme="http://woodenrobot.me/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Scrapy" scheme="http://woodenrobot.me/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy爬虫框架教程（三）-- 调试(Debugging)Spiders</title>
    <link href="http://woodenrobot.me/2017/02/12/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89-%E8%B0%83%E8%AF%95-Debugging-Spiders/"/>
    <id>http://woodenrobot.me/2017/02/12/Scrapy爬虫框架教程（三）-调试-Debugging-Spiders/</id>
    <published>2017-02-12T15:25:19.000Z</published>
    <updated>2017-04-09T07:48:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>春节放假在老家没有网，所以最近没有更新。这周加班闲暇抽空赶紧来更新一篇。我们在写爬虫的时候经常需要修改xapth规则来获取所需的数据，而Scrapy的爬虫通常是在命令行中启动的，我们怎么去调试呢？下面我就为大家介绍两种我常用的方法。<br><a id="more"></a></p><h1 id="工具和环境"><a href="#工具和环境" class="headerlink" title="工具和环境"></a>工具和环境</h1><ol><li>语言：python 2.7</li><li>IDE： Pycharm</li><li>浏览器：Chrome</li><li>爬虫框架：Scrapy 1.2.1</li></ol><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><p>通过 scrapy.shell.inspect_response 函数来实现。以<a href="http://woodenrobot.me/2017/01/07/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89-%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1TOP250/">上一篇教程</a>的爬虫为例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># @Time     : 2017/1/7 17:04</span></div><div class="line"><span class="comment"># @Author   : woodenrobot</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Request</div><div class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> Spider</div><div class="line"><span class="keyword">from</span> scrapyspider.items <span class="keyword">import</span> DoubanMovieItem</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubanMovieTop250Spider</span><span class="params">(Spider)</span>:</span></div><div class="line">    name = <span class="string">'douban_movie_top250'</span></div><div class="line">    headers = &#123;</div><div class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/'</span></div><div class="line">                      <span class="string">'537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safar'</span></div><div class="line">                      <span class="string">'i/537.36'</span>,</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></div><div class="line">        url = <span class="string">'https://movie.douban.com/top250'</span></div><div class="line">        <span class="keyword">yield</span> Request(url, headers=self.headers)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="comment"># 命令行调试代码</span></div><div class="line">        <span class="keyword">from</span> scrapy.shell <span class="keyword">import</span> inspect_response</div><div class="line">        inspect_response(response, self)</div><div class="line">        </div><div class="line">        item = DoubanMovieItem()</div><div class="line">        movies = response.xpath(<span class="string">'//ol[@class="grid_view"]/li'</span>)</div><div class="line">        <span class="keyword">for</span> movie <span class="keyword">in</span> movies:</div><div class="line">            item[<span class="string">'ranking'</span>] = movie.xpath(</div><div class="line">                <span class="string">'.//div[@class="pic"]/em/text()'</span>).extract()[<span class="number">0</span>]</div><div class="line">            item[<span class="string">'movie_name'</span>] = movie.xpath(</div><div class="line">                <span class="string">'.//div[@class="hd"]/a/span[1]/text()'</span>).extract()[<span class="number">0</span>]</div><div class="line">            item[<span class="string">'score'</span>] = movie.xpath(</div><div class="line">                <span class="string">'.//div[@class="star"]/span[@class="rating_num"]/text()'</span></div><div class="line">            ).extract()[<span class="number">0</span>]</div><div class="line">            item[<span class="string">'score_num'</span>] = movie.xpath(</div><div class="line">                <span class="string">'.//div[@class="star"]/span/text()'</span>).re(<span class="string">ur'(\d+)人评价'</span>)[<span class="number">0</span>]</div><div class="line">            <span class="keyword">yield</span> item</div><div class="line"></div><div class="line">        next_url = response.xpath(<span class="string">'//span[@class="next"]/a/@href'</span>).extract()</div><div class="line">        <span class="keyword">if</span> next_url:</div><div class="line">            next_url = <span class="string">'https://movie.douban.com/top250'</span> + next_url[<span class="number">0</span>]</div><div class="line">            <span class="keyword">yield</span> Request(next_url, headers=self.headers)</div></pre></td></tr></table></figure></p><p>我们在下载完网页源码进行解析前可以插入上述两句代码，在命令行运行爬虫出现以下效果：<br><img src="http://7xrwo7.com1.z0.glb.clouddn.com/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89--%20%E8%B0%83%E8%AF%95%28Debugging%29SpidersQQ%E5%9B%BE%E7%89%8720170212152655.png" alt=""><br>此时我们就可以在命令行中使用xpath规则对response进行操作提取相应的信息：<br><img src="http://7xrwo7.com1.z0.glb.clouddn.com/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89--%20%E8%B0%83%E8%AF%95%28Debugging%29SpidersQQ%E5%9B%BE%E7%89%8720170212153129.png" alt=""><br>有时候下载下来的网页结构和浏览器中看到的不一样，我们可以利用<code>view(response)</code>将爬虫下载到的网页源码在浏览器中打开：<br><img src="http://7xrwo7.com1.z0.glb.clouddn.com/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89--%20%E8%B0%83%E8%AF%95%28Debugging%29SpidersQQ%E5%9B%BE%E7%89%8720170212153609.png" alt=""><br>在命令行输入<code>view(response)</code>后默认浏览器会自动打开下载到的网页源码。<br><img src="http://7xrwo7.com1.z0.glb.clouddn.com/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89--%20%E8%B0%83%E8%AF%95%28Debugging%29SpidersQQ%E5%9B%BE%E7%89%8720170212153634.png" alt=""><br>虽然scrapy自己提供了这个方式让我们调试自己的爬虫，但是这个方式有很大的局限性。如果能利用pycharm的Debug功能进行调试就太好了。下面我就为大家介绍这么用pycharm调试自己的爬虫。  </p><h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><p>首先在setting.py同级目录下创建run.py文件。<br><img src="http://7xrwo7.com1.z0.glb.clouddn.com/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89--%20%E8%B0%83%E8%AF%95%28Debugging%29SpidersQQ%E5%9B%BE%E7%89%8720170212154126.png" alt=""><br>写入以下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># @Time     : 2017/1/1 17:51</span></div><div class="line"><span class="comment"># @Author   : woodenrobot</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> cmdline</div><div class="line"></div><div class="line"></div><div class="line">name = <span class="string">'douban_movie_top250'</span></div><div class="line">cmd = <span class="string">'scrapy crawl &#123;0&#125;'</span>.format(name)</div><div class="line">cmdline.execute(cmd.split())</div></pre></td></tr></table></figure></p><p>其中<code>name</code>参数为spider的name。<br>接着在spider文件中设置断点。<br><img src="http://7xrwo7.com1.z0.glb.clouddn.com/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89--%20%E8%B0%83%E8%AF%95%28Debugging%29SpidersQQ%E5%9B%BE%E7%89%8720170212154545.png" alt=""><br>返回<code>run.py</code>文件中右键选择Debug。<br><img src="http://7xrwo7.com1.z0.glb.clouddn.com/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89--%20%E8%B0%83%E8%AF%95%28Debugging%29SpidersQQ%E5%9B%BE%E7%89%8720170212154625.png" alt=""><br>最后程序就会在断点处暂停，我们就可以查看相应的内容从而进行调试<br><img src="http://7xrwo7.com1.z0.glb.clouddn.com/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89--%20%E8%B0%83%E8%AF%95%28Debugging%29SpidersQQ%E5%9B%BE%E7%89%8720170212154711.png" alt=""></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>两种方法适合不同的场景，不过一般情况下肯定是方法2好用。: )  </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;春节放假在老家没有网，所以最近没有更新。这周加班闲暇抽空赶紧来更新一篇。我们在写爬虫的时候经常需要修改xapth规则来获取所需的数据，而Scrapy的爬虫通常是在命令行中启动的，我们怎么去调试呢？下面我就为大家介绍两种我常用的方法。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://woodenrobot.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://woodenrobot.me/tags/Python/"/>
    
      <category term="爬虫" scheme="http://woodenrobot.me/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Scrapy" scheme="http://woodenrobot.me/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>利用爬虫和树莓派3打造自己的语音天气闹钟</title>
    <link href="http://woodenrobot.me/2017/01/21/%E5%88%A9%E7%94%A8%E7%88%AC%E8%99%AB%E5%92%8C%E6%A0%91%E8%8E%93%E6%B4%BE3%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%AD%E9%9F%B3%E5%A4%A9%E6%B0%94%E9%97%B9%E9%92%9F/"/>
    <id>http://woodenrobot.me/2017/01/21/利用爬虫和树莓派3打造自己的语音天气闹钟/</id>
    <published>2017-01-21T15:06:18.000Z</published>
    <updated>2017-07-15T15:54:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前不久又一次一个人在他乡过了生日，悄悄买了一台树莓派3送给自己做生日礼物。终于算是实现了大学以来一直的一个小愿望。买回来之后当然不能让他落灰，于是就利用自己的爬虫技术+树莓派+小音箱实现了一个定时闹钟外加语音天气播报功能。<br><a id="more"></a></p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ol><li>树莓派3</li><li>小音箱</li></ol><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>python 3.4</p><h1 id="获取所在位置天气"><a href="#获取所在位置天气" class="headerlink" title="获取所在位置天气"></a>获取所在位置天气</h1><p>这里选择墨迹天气获取实时天气信息，地址：<br><a href="http://tianqi.moji.com/" target="_blank" rel="external">http://tianqi.moji.com/</a><br>进入墨迹天气的页面，墨迹天气会根据你的ip加载相应地区的天气。<br><img src="http://7xraal.com1.z0.glb.clouddn.com/%E5%88%A9%E7%94%A8%E7%88%AC%E8%99%AB%E5%92%8C%E6%A0%91%E8%8E%93%E6%B4%BE3%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%AD%E9%9F%B3%E5%A4%A9%E6%B0%94%E9%97%B9%E9%92%9F1.png" alt=""><br>这次我们主要抓取温度、天气、湿度、风力、空气质量和天气提示这几个数据。<br>这种小爬虫我们就不用Scrap那种重型武器啦，使用requests和BeautifulSoup这两个超级好用的库可以快速实现。<br>首先依次输入下列两行命令安装好requests和BeautifulSoup库。<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip3 install requests</div><div class="line">pip3 install beautifulsoup4</div></pre></td></tr></table></figure></p><p>爬虫代码如下所示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line"></div><div class="line">headers = &#123;</div><div class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit'</span></div><div class="line">                      <span class="string">'/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safar'</span></div><div class="line">                      <span class="string">'i/537.36'</span>,</div><div class="line">    &#125;</div><div class="line"></div><div class="line">res2 = requests.get(<span class="string">'http://tianqi.moji.com/'</span>, headers=headers)</div><div class="line"></div><div class="line">soup = BeautifulSoup(res2.text, <span class="string">"html.parser"</span>)</div><div class="line">temp = soup.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'wea_weather clearfix'</span>&#125;).em.getText()</div><div class="line">weather = soup.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'wea_weather clearfix'</span>&#125;).b.getText()</div><div class="line">sd = soup.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'wea_about clearfix'</span>&#125;).span.getText()</div><div class="line">sd_num = re.search(<span class="string">r'\d+'</span>, sd).group()</div><div class="line">sd = sd.replace(sd_num, sd_num_zh)</div><div class="line">wind = soup.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'wea_about clearfix'</span>&#125;).em.getText()</div><div class="line">aqi = soup.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'wea_alert clearfix'</span>&#125;).em.getText()</div><div class="line">aqi_num = re.search(<span class="string">r'\d+'</span>, aqi).group()</div><div class="line">aqi = aqi.replace(aqi_num, aqi_num_zh)</div><div class="line">info = soup.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'wea_tips clearfix'</span>&#125;).em.getText()</div><div class="line">sd = sd.replace(<span class="string">' '</span>, <span class="string">'百分之'</span>).replace(<span class="string">'%'</span>, <span class="string">''</span>)</div><div class="line">aqi = <span class="string">'aqi'</span> + aqi</div><div class="line"></div><div class="line">today = datetime.now().date().strftime(<span class="string">'%Y年%m月%d日'</span>)</div><div class="line">text = <span class="string">'早上好！今天是%s,天气%s,温度%s摄氏度,%s,%s,%s,%s'</span> % \</div><div class="line">       (today, weather, temp, sd, wind, aqi, info)</div></pre></td></tr></table></figure></p><p>至于Requests和Beautiful Soup的用法这里就先不多说了，大家可以去看他们的中文文档。</p><ol><li><a href="http://docs.python-requests.org/zh_CN/latest/index.html" target="_blank" rel="external">Requests中文wendnag</a></li><li><a href="http://beautifulsoup.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">Beautiful Soup中文文档</a></li></ol><h1 id="命令行播放语音"><a href="#命令行播放语音" class="headerlink" title="命令行播放语音"></a>命令行播放语音</h1><p>使用mplayer实现语音播放,通过以下命令安装mplayer:<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install mplayer</div></pre></td></tr></table></figure></p><p>用法很简单输入以下命令即可播放本地音乐：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mplayer \xxx\xxx\xxx.mp3(绝对地址)</div></pre></td></tr></table></figure></p><p>如果是在线音乐也可以用mplayer直接通过URL播放：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mplayer &quot;URl&quot;(URL外面一定要用双引号圈起来)</div></pre></td></tr></table></figure></p><h1 id="文字转语音"><a href="#文字转语音" class="headerlink" title="文字转语音"></a>文字转语音</h1><p>刚开始想通过python的库实现本地文字转语音，在windows系统下没有问题，但树莓派3上中文无法转换。后来就找到了百度的文字转换语音API，地址：<a href="http://yuyin.baidu.com/#try" target="_blank" rel="external">http://yuyin.baidu.com/#try</a><br>还可以选各种声音，调节语速。虽然它没有给出直接的api接口，但是我们利用Chrome浏览器的开发者模式可以找到api。<br><img src="http://7xrwo7.com1.z0.glb.clouddn.com/%E5%88%A9%E7%94%A8%E7%88%AC%E8%99%AB%E5%92%8C%E6%A0%91%E8%8E%93%E6%B4%BE3%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%AD%E9%9F%B3%E5%A4%A9%E6%B0%94%E9%97%B9%E9%92%9F2.png" alt=""><br>打开开发者模式，点击播放的按钮，在network里就可以找到刚刚发出的请。<br><a href="http://tts.baidu.com/text2audio?idx=1&amp;tex=1&amp;cuid=baidu_speech_demo&amp;cod=2&amp;lan=zh&amp;ctp=1&amp;pdt=1&amp;spd=5&amp;per=4&amp;vol=5&amp;pit=5" target="_blank" rel="external">http://tts.baidu.com/text2audio?idx=1&amp;tex=1&amp;cuid=baidu_speech_demo&amp;cod=2&amp;lan=zh&amp;ctp=1&amp;pdt=1&amp;spd=5&amp;per=4&amp;vol=5&amp;pit=5</a>就我们要找的百度文字转语音API,其中per是参数是语音的类型，spd是语速，vol是音量，而tex则是需要转换的文字。通过以下代码就可以实现将特定的文字转换为语音。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line">  </div><div class="line">url = <span class="string">u'http://tts.baidu.com/text2audio?idx=1&amp;tex=&#123;0&#125;&amp;cuid=baidu_speech_'</span> \</div><div class="line">      <span class="string">u'demo&amp;cod=2&amp;lan=zh&amp;ctp=1&amp;pdt=1&amp;spd=4&amp;per=4&amp;vol=5&amp;pit=5'</span>.format(text)</div><div class="line">os.system(<span class="string">'mplayer "%s"'</span> % url)</div></pre></td></tr></table></figure></p><h1 id="实现定时播放语音"><a href="#实现定时播放语音" class="headerlink" title="实现定时播放语音"></a>实现定时播放语音</h1><p>我们使用crontab来实现每天定时启动程序。<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">30</span> <span class="number">07</span> * * * /usr/bin/python3 /home/pi/Documens/Python/weather_voice.py</div></pre></td></tr></table></figure></p><p><strong>Ps:注意crontab中的路径要使用绝对路径。</strong><br>具体的crontab用法就不在这里一一讲解了，大家随便搜索一下就有很多。</p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>中间还遇到了一些小bug，比如说语音转文字的过程中数字只能一个一个的念出来，做为一个完美主义者肯定不能忍受这个，12摄氏度给我播报成一二摄氏度怎么行！！！所以就写了一个小函数专门转换数字为中文。最后所有的代码整合起来就是这样啦。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># @Time     : 2017/1/15 15:16</span></div><div class="line"><span class="comment"># @Author   : woodenrobot</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line"></div><div class="line">headers = &#123;</div><div class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit'</span></div><div class="line">                      <span class="string">'/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safar'</span></div><div class="line">                      <span class="string">'i/537.36'</span>,</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">numtozh</span><span class="params">(num)</span>:</span></div><div class="line">    num_dict = &#123;<span class="number">1</span>: <span class="string">'一'</span>, <span class="number">2</span>: <span class="string">'二'</span>, <span class="number">3</span>: <span class="string">'三'</span>, <span class="number">4</span>: <span class="string">'四'</span>, <span class="number">5</span>: <span class="string">'五'</span>, <span class="number">6</span>: <span class="string">'六'</span>, <span class="number">7</span>: <span class="string">'七'</span>,</div><div class="line">                <span class="number">8</span>: <span class="string">'八'</span>, <span class="number">9</span>: <span class="string">'九'</span>, <span class="number">0</span>: <span class="string">'零'</span>&#125;</div><div class="line">    num = int(num)</div><div class="line">    <span class="keyword">if</span> <span class="number">100</span> &lt;= num &lt; <span class="number">1000</span>:</div><div class="line">        b_num = num // <span class="number">100</span></div><div class="line">        s_num = (num-b_num*<span class="number">100</span>) // <span class="number">10</span></div><div class="line">        g_num = (num-b_num*<span class="number">100</span>) % <span class="number">10</span></div><div class="line">        <span class="keyword">if</span> g_num == <span class="number">0</span> <span class="keyword">and</span> s_num == <span class="number">0</span>:</div><div class="line">            num = <span class="string">'%s百'</span> % (num_dict[b_num])</div><div class="line">        <span class="keyword">elif</span> s_num == <span class="number">0</span>:</div><div class="line">            num = <span class="string">'%s百%s%s'</span> % (num_dict[b_num], num_dict.get(s_num, <span class="string">''</span>), num_dict.get(g_num, <span class="string">''</span>))</div><div class="line">        <span class="keyword">elif</span> g_num == <span class="number">0</span>:</div><div class="line">            num = <span class="string">'%s百%s十'</span> % (num_dict[b_num], num_dict.get(s_num, <span class="string">''</span>))</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            num = <span class="string">'%s百%s十%s'</span> % (num_dict[b_num], num_dict.get(s_num, <span class="string">''</span>), num_dict.get(g_num, <span class="string">''</span>))</div><div class="line">    <span class="keyword">elif</span> <span class="number">10</span> &lt;= num &lt; <span class="number">100</span>:</div><div class="line">        s_num = num // <span class="number">10</span></div><div class="line">        g_num = (num-s_num*<span class="number">10</span>) % <span class="number">10</span></div><div class="line">        <span class="keyword">if</span> g_num == <span class="number">0</span>:</div><div class="line">            g_num = <span class="string">''</span></div><div class="line">        num = <span class="string">'%s十%s'</span> % (num_dict[s_num], num_dict.get(g_num, <span class="string">''</span>))</div><div class="line">    <span class="keyword">elif</span> <span class="number">0</span> &lt;= num &lt; <span class="number">10</span>:</div><div class="line">        g_num = num</div><div class="line">        num = <span class="string">'%s'</span> % (num_dict[g_num])</div><div class="line">    <span class="keyword">elif</span> <span class="number">-10</span> &lt; num &lt; <span class="number">0</span>:</div><div class="line">        g_num = -num</div><div class="line">        num = <span class="string">'零下%s'</span> % (num_dict[g_num])</div><div class="line">    <span class="keyword">elif</span> <span class="number">-100</span> &lt; num &lt;= <span class="number">-10</span>:</div><div class="line">        num = -num</div><div class="line">        s_num = num // <span class="number">10</span></div><div class="line">        g_num = (num-s_num*<span class="number">10</span>) % <span class="number">10</span></div><div class="line">        <span class="keyword">if</span> g_num == <span class="number">0</span>:</div><div class="line">            g_num = <span class="string">''</span></div><div class="line">        num = <span class="string">'零下%s十%s'</span> % (num_dict[s_num], num_dict.get(g_num, <span class="string">''</span>))</div><div class="line">    <span class="keyword">return</span> num</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_weather</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># 下载墨迹天气主页源码</span></div><div class="line">    res = requests.get(<span class="string">'http://tianqi.moji.com/'</span>, headers=headers)</div><div class="line">    <span class="comment"># 用BeautifulSoup获取所需信息</span></div><div class="line">    soup = BeautifulSoup(res.text, <span class="string">"html.parser"</span>)</div><div class="line">    temp = soup.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'wea_weather clearfix'</span>&#125;).em.getText()</div><div class="line">    temp = numtozh(int(temp))</div><div class="line">    weather = soup.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'wea_weather clearfix'</span>&#125;).b.getText()</div><div class="line">    sd = soup.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'wea_about clearfix'</span>&#125;).span.getText()</div><div class="line">    sd_num = re.search(<span class="string">r'\d+'</span>, sd).group()</div><div class="line">    sd_num_zh = numtozh(int(sd_num))</div><div class="line">    sd = sd.replace(sd_num, sd_num_zh)</div><div class="line">    wind = soup.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'wea_about clearfix'</span>&#125;).em.getText()</div><div class="line">    aqi = soup.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'wea_alert clearfix'</span>&#125;).em.getText()</div><div class="line">    aqi_num = re.search(<span class="string">r'\d+'</span>, aqi).group()</div><div class="line">    aqi_num_zh = numtozh(int(aqi_num))</div><div class="line">    aqi = aqi.replace(aqi_num, aqi_num_zh).replace(<span class="string">' '</span>, <span class="string">',空气质量'</span>)</div><div class="line">    info = soup.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'wea_tips clearfix'</span>&#125;).em.getText()</div><div class="line">    sd = sd.replace(<span class="string">' '</span>, <span class="string">'百分之'</span>).replace(<span class="string">'%'</span>, <span class="string">''</span>)</div><div class="line">    aqi = <span class="string">'aqi'</span> + aqi</div><div class="line">    info = info.replace(<span class="string">'，'</span>, <span class="string">','</span>)</div><div class="line">    <span class="comment"># 获取今天的日期</span></div><div class="line">    today = datetime.now().date().strftime(<span class="string">'%Y年%m月%d日'</span>)</div><div class="line">    <span class="comment"># 将获取的信息拼接成一句话</span></div><div class="line">    text = <span class="string">'早上好！今天是%s,天气%s,温度%s摄氏度,%s,%s,%s,%s'</span> % \</div><div class="line">           (today, weather, temp, sd, wind, aqi, info)</div><div class="line">    <span class="keyword">return</span> text</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">text2voice</span><span class="params">(text)</span>:</span></div><div class="line">    url = <span class="string">'http://tts.baidu.com/text2audio?idx=1&amp;tex=&#123;0&#125;&amp;cuid=baidu_speech_'</span> \</div><div class="line">          <span class="string">'demo&amp;cod=2&amp;lan=zh&amp;ctp=1&amp;pdt=1&amp;spd=4&amp;per=4&amp;vol=5&amp;pit=5'</span>.format(text)</div><div class="line">    <span class="comment"># 直接播放语音</span></div><div class="line">    os.system(<span class="string">'mplayer "%s"'</span> % url)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># 获取需要转换语音的文字</span></div><div class="line">    text = get_weather()</div><div class="line">    print(text)</div><div class="line">    <span class="comment"># 获取音乐文件绝对地址</span></div><div class="line">    mp3path2 = os.path.join(os.path.dirname(__file__), <span class="string">'2.mp3'</span>)</div><div class="line">    <span class="comment"># 先播放一首音乐做闹钟</span></div><div class="line">    os.system(<span class="string">'mplayer %s'</span> % mp3path2)</div><div class="line">    <span class="comment"># 播报语音天气</span></div><div class="line">    text2voice(text)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前不久又一次一个人在他乡过了生日，悄悄买了一台树莓派3送给自己做生日礼物。终于算是实现了大学以来一直的一个小愿望。买回来之后当然不能让他落灰，于是就利用自己的爬虫技术+树莓派+小音箱实现了一个定时闹钟外加语音天气播报功能。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://woodenrobot.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://woodenrobot.me/tags/Python/"/>
    
      <category term="爬虫" scheme="http://woodenrobot.me/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="树莓派" scheme="http://woodenrobot.me/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy爬虫框架教程（二）-- 爬取豆瓣电影TOP250</title>
    <link href="http://woodenrobot.me/2017/01/07/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89-%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1TOP250/"/>
    <id>http://woodenrobot.me/2017/01/07/Scrapy爬虫框架教程（二）-爬取豆瓣电影TOP250/</id>
    <published>2017-01-07T15:32:56.000Z</published>
    <updated>2018-02-24T14:23:19.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>经过<a href="http://woodenrobot.me/2017/01/01/scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89-Scrapy%E5%85%A5%E9%97%A8/">上一篇教程</a>我们已经大致了解了Scrapy的基本情况，并写了一个简单的小demo。这次我会以爬取豆瓣电影TOP250为例进一步为大家讲解一个完整爬虫的流程。<br><a id="more"></a></p><h1 id="工具和环境"><a href="#工具和环境" class="headerlink" title="工具和环境"></a>工具和环境</h1><ol><li>语言：python 2.7</li><li>IDE： Pycharm</li><li>浏览器：Chrome</li><li>爬虫框架：Scrapy 1.2.1</li></ol><h1 id="教程正文"><a href="#教程正文" class="headerlink" title="教程正文"></a>教程正文</h1><h2 id="观察页面结构"><a href="#观察页面结构" class="headerlink" title="观察页面结构"></a>观察页面结构</h2><p>首先我们打开<a href="https://movie.douban.com/top250" target="_blank" rel="external">豆瓣电影TOP250</a>的页面<br><img src="http://7xrwo7.com1.z0.glb.clouddn.com/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89--%20%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1TOP250QQ%E5%9B%BE%E7%89%8720170107172029.png" alt=""><br>通过观察页面决定让我们的爬虫获取每一部电影的排名、电影名称、评分和评分的人数。</p><h2 id="声明Item"><a href="#声明Item" class="headerlink" title="声明Item"></a>声明Item</h2><p>什么是Items呢？<a href="http://scrapy-chs.readthedocs.io/zh_CN/1.0/topics/items.html" target="_blank" rel="external">官方文档Items定义</a>如下：</p><blockquote><p>Items</p><p>爬取的主要目标就是从非结构性的数据源提取结构性数据，例如网页。 Scrapy spider可以以python的dict来返回提取的数据.虽然dict很方便，并且用起来也熟悉，但是其缺少结构性，容易打错字段的名字或者返回不一致的数据，尤其在具有多个spider的大项目中。</p><p>为了定义常用的输出数据，Scrapy提供了 Item 类。 Item 对象是种简单的容器，保存了爬取到得数据。 其提供了 类似于词典(dictionary-like) 的API以及用于声明可用字段的简单语法。</p><p>许多Scrapy组件使用了Item提供的额外信息: exporter根据Item声明的字段来导出数据、 序列化可以通过Item字段的元数据(metadata)来定义、 trackref 追踪Item实例来帮助寻找内存泄露 (see 使用 trackref 调试内存泄露) 等等。</p></blockquote><p>Item使用简单的class定义语法以及Field对象来声明。我们打开scrapyspider目录下的items.py文件写入下列代码声明Item：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubanMovieItem</span><span class="params">(scrapy.Item)</span>:</span></div><div class="line">    <span class="comment"># 排名</span></div><div class="line">    ranking = scrapy.Field()</div><div class="line">    <span class="comment"># 电影名称</span></div><div class="line">    movie_name = scrapy.Field()</div><div class="line">    <span class="comment"># 评分</span></div><div class="line">    score = scrapy.Field()</div><div class="line">    <span class="comment"># 评论人数</span></div><div class="line">    score_num = scrapy.Field()</div></pre></td></tr></table></figure><h2 id="爬虫程序"><a href="#爬虫程序" class="headerlink" title="爬虫程序"></a>爬虫程序</h2><p>在scrapyspider/spiders目录下创建douban_spider.py文件，并写入初步的代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> Spider</div><div class="line"><span class="keyword">from</span> scrapyspider.items <span class="keyword">import</span> DoubanMovieItem</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubanMovieTop250Spider</span><span class="params">(Spider)</span>:</span></div><div class="line">    name = <span class="string">'douban_movie_top250'</span></div><div class="line">    start_urls = [<span class="string">'https://movie.douban.com/top250'</span>]</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        item = DoubanMovieItem()</div></pre></td></tr></table></figure></p><p>这个一个基本的scrapy的spider的model，首先我们要导入Scrapy.spiders中的Spider类，以及scrapyspider.items中我们刚刚定义好的DoubanMovieItem。<br>接着创建我们自己的爬虫类DoubanMovieTop250Spider并继承Spider类，scrapy.spiders中有很多不同的爬虫类可供我们继承，一般情况下使用Spider类就可以满足要求。（其他爬虫类的使用可以去参考<a href="http://scrapy-chs.readthedocs.io/zh_CN/1.0/topics/spiders.html" target="_blank" rel="external">官方文档</a>）。  </p><blockquote><p>Spider </p><p>class scrapy.spider.Spider  </p><p>Spider是最简单的spider。每个其他的spider必须继承自该类(包括Scrapy自带的其他spider以及您自己编写的spider)。 Spider并没有提供什么特殊的功能。 其仅仅请求给定的 start_urls/start_requests ，并根据返回的结果(resulting responses)调用spider的 parse 方法。</p><p>name<br>定义spider名字的字符串(string)。spider的名字定义了Scrapy如何定位(并初始化)spider，所以其必须是唯一的。 不过您可以生成多个相同的spider实例(instance)，这没有任何限制。 name是spider最重要的属性，而且是必须的。</p><p>如果该spider爬取单个网站(single domain)，一个常见的做法是以该网站(domain)(加或不加 后缀 )来命名spider。 例如，如果spider爬取 mywebsite.com ，该spider通常会被命名为 mywebsite 。</p><p>allowed_domains<br>可选。包含了spider允许爬取的域名(domain)列表(list)。 当 OffsiteMiddleware 启用时， 域名不在列表中的URL不会被跟进。</p><p>start_urls<br>URL列表。当没有制定特定的URL时，spider将从该列表中开始进行爬取。 因此，第一个被获取到的页面的URL将是该列表之一。 后续的URL将会从获取到的数据中提取。</p><p>start_requests()<br>该方法必须返回一个可迭代对象(iterable)。该对象包含了spider用于爬取的第一个Request。</p><p>当spider启动爬取并且未制定URL时，该方法被调用。 当指定了URL时，make_requests_from_url() 将被调用来创建Request对象。 该方法仅仅会被Scrapy调用一次，因此您可以将其实现为生成器。</p><p>该方法的默认实现是使用 start_urls 的url生成Request。</p><p>如果您想要修改最初爬取某个网站的Request对象，您可以重写(override)该方法。 例如，如果您需要在启动时以POST登录某个网站，你可以这么写:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> [scrapy.FormRequest(<span class="string">"http://www.example.com/login"</span>,</div><div class="line">                               formdata=&#123;<span class="string">'user'</span>: <span class="string">'john'</span>, <span class="string">'pass'</span>: <span class="string">'secret'</span>&#125;,</div><div class="line">                               callback=self.logged_in)]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">logged_in</span><span class="params">(self, response)</span>:</span></div><div class="line">    <span class="comment"># here you would extract links to follow and return Requests for</span></div><div class="line">    <span class="comment"># each of them, with another callback</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p><p>make_requests_from_url(url)<br>该方法接受一个URL并返回用于爬取的 Request 对象。 该方法在初始化request时被 start_requests() 调用，也被用于转化url为request。</p><p>默认未被复写(overridden)的情况下，该方法返回的Request对象中， parse() 作为回调函数，dont_filter参数也被设置为开启。 (详情参见 Request).</p><p>parse(response)<br>当response没有指定回调函数时，该方法是Scrapy处理下载的response的默认方法。</p><p>parse 负责处理response并返回处理的数据以及(/或)跟进的URL。 Spider 对其他的Request的回调函数也有相同的要求。</p><p>该方法及其他的Request回调函数必须返回一个包含 Request 及(或) Item 的可迭代的对象。</p><p>参数:    response (Response) – 用于分析的response</p><p>log(message[, level, component])<br>使用 scrapy.log.msg() 方法记录(log)message。 log中自动带上该spider的 name 属性。 更多数据请参见 Logging 。</p><p>closed(reason)<br>当spider关闭时，该函数被调用。 该方法提供了一个替代调用signals.connect()来监听 spider_closed 信号的快捷方式。  </p></blockquote><h2 id="提取网页信息"><a href="#提取网页信息" class="headerlink" title="提取网页信息"></a>提取网页信息</h2><p>我们使用xpath语法来提取我们所需的信息。<br>不熟悉xpath语法的可以在<a href="http://www.w3school.com.cn/xpath/index.asp" target="_blank" rel="external">W3School网站</a>学习一下，很快就能上手。<br>首先我们在chrome浏览器里进入豆瓣电影TOP250页面并按F12打开开发者工具。<br><img src="http://7xrwo7.com1.z0.glb.clouddn.com/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89--%20%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1TOP250QQ%E5%9B%BE%E7%89%8720170107180752.png" alt=""><br>点击工具栏左上角的类鼠标符号图标或者Ctrl + Shift + c在页面中点击我们想要的元素即可在工具栏中看到它在网页HTML源码中所处的位置。<br>一般抓取时会以先抓大再抓小的原则来抓取。通过观察我们看到该页面所有影片的信息都位于一个class属性为grid_view的ol标签内的li标签内。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"grid_view"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pic"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span>1<span class="tag">&lt;/<span class="name">em</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://movie.douban.com/subject/1292052/"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"肖申克的救赎"</span> <span class="attr">src</span>=<span class="string">"https://img3.doubanio.com/view/movie_poster_cover/ipst/public/p480747492.jpg"</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hd"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://movie.douban.com/subject/1292052/"</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>肖申克的救赎<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>&amp;nbsp;/&amp;nbsp;The Shawshank Redemption<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"other"</span>&gt;</span>&amp;nbsp;/&amp;nbsp;月黑高飞(港)  /  刺激1995(台)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"playable"</span>&gt;</span>[可播放]<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bd"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></div><div class="line">                            导演: 弗兰克·德拉邦特 Frank Darabont&amp;nbsp;&amp;nbsp;&amp;nbsp;主演: 蒂姆·罗宾斯 Tim Robbins /...<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">                            1994&amp;nbsp;/&amp;nbsp;美国&amp;nbsp;/&amp;nbsp;犯罪 剧情</div><div class="line">                        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">                        </div><div class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"star"</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"rating5-t"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"rating_num"</span> <span class="attr">property</span>=<span class="string">"v:average"</span>&gt;</span>9.6<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">span</span> <span class="attr">property</span>=<span class="string">"v:best"</span> <span class="attr">content</span>=<span class="string">"10.0"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">span</span>&gt;</span>766719人评价<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">                            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"quote"</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"inq"</span>&gt;</span>希望让人自由。<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        ...</div><div class="line">        ...</div><div class="line">        ...</div><div class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div></pre></td></tr></table></figure></p><p>因此我们根据以上原则对所需信息进行抓取<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> Spider</div><div class="line"><span class="keyword">from</span> scrapyspider.items <span class="keyword">import</span> DoubanMovieItem</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubanMovieTop250Spider</span><span class="params">(Spider)</span>:</span></div><div class="line">    name = <span class="string">'douban_movie_top250'</span></div><div class="line">    start_urls = [<span class="string">'https://movie.douban.com/top250'</span>]</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        item = DoubanMovieItem()</div><div class="line">        movies = response.xpath(<span class="string">'//ol[@class="grid_view"]/li'</span>)</div><div class="line">        <span class="keyword">for</span> movie <span class="keyword">in</span> movies:</div><div class="line">            item[<span class="string">'ranking'</span>] = movie.xpath(</div><div class="line">                <span class="string">'.//div[@class="pic"]/em/text()'</span>).extract()[<span class="number">0</span>]</div><div class="line">            item[<span class="string">'movie_name'</span>] = movie.xpath(</div><div class="line">                <span class="string">'.//div[@class="hd"]/a/span[1]/text()'</span>).extract()[<span class="number">0</span>]</div><div class="line">            item[<span class="string">'score'</span>] = movie.xpath(</div><div class="line">                <span class="string">'.//div[@class="star"]/span[@class="rating_num"]/text()'</span></div><div class="line">            ).extract()[<span class="number">0</span>]</div><div class="line">            item[<span class="string">'score_num'</span>] = movie.xpath(</div><div class="line">                <span class="string">'.//div[@class="star"]/span/text()'</span>).re(<span class="string">ur'(\d+)人评价'</span>)[<span class="number">0</span>]</div><div class="line">            <span class="keyword">yield</span> item</div></pre></td></tr></table></figure></p><p><strong>对于Scrapy提取页面信息的内容详情可以参照<a href="http://scrapy-chs.readthedocs.io/zh_CN/1.0/topics/selectors.html" target="_blank" rel="external">官方文档的相应章节</a>。</strong></p><h2 id="运行爬虫"><a href="#运行爬虫" class="headerlink" title="运行爬虫"></a>运行爬虫</h2><p>在项目文件夹内打开cmd运行下列命令：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrapy crawl douban_movie_top250 -o douban.csv</div></pre></td></tr></table></figure></p><p><strong>注意此处的douban_movie_top250即为我们刚刚写的爬虫的name, 而-o douban.csv是scrapy提供的将item输出为csv格式的快捷方式</strong>   </p><p>试着运行一下爬虫怎么什么也没输出呢？！！！<br><img src="http://7xrwo7.com1.z0.glb.clouddn.com/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89--%20%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1TOP250QQ%E5%9B%BE%E7%89%8720170107182720.png" alt=""><br>辛辛苦苦到了这里难道要失败了吗？！！！<br>不要急我们看下一控制台输出的信息，原来是403错误了。这是因为豆瓣对爬虫设了一个小小的门槛，我们只需要更改一下发送请求时的请求头user-agent即可。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Request</div><div class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> Spider</div><div class="line"><span class="keyword">from</span> scrapyspider.items <span class="keyword">import</span> DoubanMovieItem</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubanMovieTop250Spider</span><span class="params">(Spider)</span>:</span></div><div class="line">    name = <span class="string">'douban_movie_top250'</span></div><div class="line">    headers = &#123;</div><div class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36'</span>,</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></div><div class="line">        url = <span class="string">'https://movie.douban.com/top250'</span></div><div class="line">        <span class="keyword">yield</span> Request(url, headers=self.headers)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        item = DoubanMovieItem()</div><div class="line">        movies = response.xpath(<span class="string">'//ol[@class="grid_view"]/li'</span>)</div><div class="line">        <span class="keyword">for</span> movie <span class="keyword">in</span> movies:</div><div class="line">            item[<span class="string">'ranking'</span>] = movie.xpath(</div><div class="line">                <span class="string">'.//div[@class="pic"]/em/text()'</span>).extract()[<span class="number">0</span>]</div><div class="line">            item[<span class="string">'movie_name'</span>] = movie.xpath(</div><div class="line">                <span class="string">'.//div[@class="hd"]/a/span[1]/text()'</span>).extract()[<span class="number">0</span>]</div><div class="line">            item[<span class="string">'score'</span>] = movie.xpath(</div><div class="line">                <span class="string">'.//div[@class="star"]/span[@class="rating_num"]/text()'</span></div><div class="line">            ).extract()[<span class="number">0</span>]</div><div class="line">            item[<span class="string">'score_num'</span>] = movie.xpath(</div><div class="line">                <span class="string">'.//div[@class="star"]/span/text()'</span>).re(<span class="string">ur'(\d+)人评价'</span>)[<span class="number">0</span>]</div><div class="line">            <span class="keyword">yield</span> item</div></pre></td></tr></table></figure></p><p>更改后的代码是不是觉得有些地方不太一样了？start_urls怎么不见了？start_re quests函数又是干什么的？还记得刚才对Spider类的介绍吗？先回过头复习一下上面关于start_urls和start_requests函数的介绍。简单的说就是使用start_requests函数我们对初始URL的处理就有了更多的权利，比如这次给初始URL增加请求头user_agent。</p><p>再次运行爬虫，我们想要的信息都被下载到douban.scv文件夹里了。直接用WPS打开即可查看信息。<br><img src="http://7xrwo7.com1.z0.glb.clouddn.com/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89--%20%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1TOP250QQ%E5%9B%BE%E7%89%8720170107183811.png" alt=""></p><h2 id="自动翻页"><a href="#自动翻页" class="headerlink" title="自动翻页"></a>自动翻页</h2><p>先别急着高兴，你难道没有发现一个问题吗?这样的话我们还是只能爬到当前页的25个电影的内容。怎么样才能把剩下的也一起爬下来呢？<br>实现自动翻页一般有两种方法：</p><ol><li>在页面中找到下一页的地址；</li><li>自己根据URL的变化规律构造所有页面地址。</li></ol><p>一般情况下我们使用第一种方法，第二种方法适用于页面的下一页地址为JS加载的情况。今天我们只说第一种方法。<br>首先利用Chrome浏览器的开发者工具找到下一页的地址<br><img src="http://7xrwo7.com1.z0.glb.clouddn.com/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89--%20%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1TOP250QQ%E5%9B%BE%E7%89%8720170107185053.png" alt=""><br>然后在解析该页面时获取下一页的地址并将地址交给调度器(Scheduler)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Request</div><div class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> Spider</div><div class="line"><span class="keyword">from</span> scrapyspider.items <span class="keyword">import</span> DoubanMovieItem</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubanMovieTop250Spider</span><span class="params">(Spider)</span>:</span></div><div class="line">    name = <span class="string">'douban_movie_top250'</span></div><div class="line">    headers = &#123;</div><div class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36'</span>,</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></div><div class="line">        url = <span class="string">'https://movie.douban.com/top250'</span></div><div class="line">        <span class="keyword">yield</span> Request(url, headers=self.headers)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        item = DoubanMovieItem()</div><div class="line">        movies = response.xpath(<span class="string">'//ol[@class="grid_view"]/li'</span>)</div><div class="line">        <span class="keyword">for</span> movie <span class="keyword">in</span> movies:</div><div class="line">            item[<span class="string">'ranking'</span>] = movie.xpath(</div><div class="line">                <span class="string">'.//div[@class="pic"]/em/text()'</span>).extract()[<span class="number">0</span>]</div><div class="line">            item[<span class="string">'movie_name'</span>] = movie.xpath(</div><div class="line">                <span class="string">'.//div[@class="hd"]/a/span[1]/text()'</span>).extract()[<span class="number">0</span>]</div><div class="line">            item[<span class="string">'score'</span>] = movie.xpath(</div><div class="line">                <span class="string">'.//div[@class="star"]/span[@class="rating_num"]/text()'</span></div><div class="line">            ).extract()[<span class="number">0</span>]</div><div class="line">            item[<span class="string">'score_num'</span>] = movie.xpath(</div><div class="line">                <span class="string">'.//div[@class="star"]/span/text()'</span>).re(<span class="string">ur'(\d+)人评价'</span>)[<span class="number">0</span>]</div><div class="line">            <span class="keyword">yield</span> item</div><div class="line"></div><div class="line">        next_url = response.xpath(<span class="string">'//span[@class="next"]/a/@href'</span>).extract()</div><div class="line">        <span class="keyword">if</span> next_url:</div><div class="line">            next_url = <span class="string">'https://movie.douban.com/top250'</span> + next_url[<span class="number">0</span>]</div><div class="line">            <span class="keyword">yield</span> Request(next_url, headers=self.headers)</div></pre></td></tr></table></figure></p><p>最后再运行一下爬虫，打开douban.csv。是不是发现所有的影片信息都获取到了，250个一个不多一个不少。<br><img src="http://7xrwo7.com1.z0.glb.clouddn.com/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89--%20%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1TOP250QQ%E5%9B%BE%E7%89%8720170107185753.png" alt=""><br>最后，利用WPS的筛选功能你可以筛选任意符合你要求的影片。（Ps:外来的和尚有时候不一定好念经。记得要用WPS打开这个CVS文件，用EXCEL打开会因为有中文而显示不正常。）</p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>从写这个Scrapy爬虫框架教程以来，我越来越觉得自己学会的东西再输出出去没有想象的那么简单，往往写了几个小时的教程最后发现还是没有想表达的东西表达完美。如果有什么说的不好的地方欢迎大家指正。闻道有先后，术业有专攻。大家互相学习: )<br>源码地址：<a href="https://github.com/Wooden-Robot/scrapy-tutorial" target="_blank" rel="external">https://github.com/Wooden-Robot/scrapy-tutorial</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;经过&lt;a href=&quot;http://woodenrobot.me/2017/01/01/scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89-Scrapy%E5%85%A5%E9%97%A8/&quot;&gt;上一篇教程&lt;/a&gt;我们已经大致了解了Scrapy的基本情况，并写了一个简单的小demo。这次我会以爬取豆瓣电影TOP250为例进一步为大家讲解一个完整爬虫的流程。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://woodenrobot.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://woodenrobot.me/tags/Python/"/>
    
      <category term="爬虫" scheme="http://woodenrobot.me/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Scrapy" scheme="http://woodenrobot.me/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>scrapy爬虫框架教程（一）-- Scrapy入门</title>
    <link href="http://woodenrobot.me/2017/01/01/scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89-Scrapy%E5%85%A5%E9%97%A8/"/>
    <id>http://woodenrobot.me/2017/01/01/scrapy爬虫框架教程（一）-Scrapy入门/</id>
    <published>2017-01-01T10:32:01.000Z</published>
    <updated>2018-03-14T06:58:09.641Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>转行做python程序员已经有三个月了，这三个月用Scrapy爬虫框架写了两百多个爬虫，不能说精通了Scrapy，但是已经对Scrapy有了一定的熟悉。准备写一个系列的Scrapy爬虫教程，一方面通过输出巩固和梳理自己这段时间学到的知识，另一方面当初受惠于别人的博客教程，我也想通过这个系列教程帮助一些想要学习Scrapy的人。<br><a id="more"></a></p><h1 id="Scrapy简介"><a href="#Scrapy简介" class="headerlink" title="Scrapy简介"></a>Scrapy简介</h1><blockquote><p>Scrapy是一个为了爬取网站数据，提取结构性数据而编写的应用框架。 可以应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。<br>其最初是为了 页面抓取 (更确切来说, 网络抓取 )所设计的， 也可以应用在获取API所返回的数据(例如 Amazon Associates Web Services ) 或者通用的网络爬虫。  </p></blockquote><h1 id="架构概览"><a href="#架构概览" class="headerlink" title="架构概览"></a>架构概览</h1><p><img src="http://7xraal.com1.z0.glb.clouddn.com/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89--%20Scrapy%E5%85%A5%E9%97%A8scrapy_architecture.png" alt=""></p><h2 id="各组件作用"><a href="#各组件作用" class="headerlink" title="各组件作用"></a>各组件作用</h2><h3 id="Scrapy-Engine"><a href="#Scrapy-Engine" class="headerlink" title="Scrapy Engine"></a>Scrapy Engine</h3><blockquote><p>引擎负责控制数据流在系统中所有组件中流动，并在相应动作发生时触发事件。 详细内容查看下面的数据流(Data Flow)部分。  </p></blockquote><p>此组件相当于爬虫的“大脑”，是整个爬虫的调度中心。</p><h3 id="调度器-Scheduler"><a href="#调度器-Scheduler" class="headerlink" title="调度器(Scheduler)"></a>调度器(Scheduler)</h3><blockquote><p>调度器从引擎接受request并将他们入队，以便之后引擎请求他们时提供给引擎。</p></blockquote><p>初始的爬取URL和后续在页面中获取的待爬取的URL将放入调度器中，等待爬取。同时调度器会自动去除重复的URL（如果特定的URL不需要去重也可以通过设置实现，如post请求的URL）</p><h3 id="下载器-Downloader"><a href="#下载器-Downloader" class="headerlink" title="下载器(Downloader)"></a>下载器(Downloader)</h3><blockquote><p>下载器负责获取页面数据并提供给引擎，而后提供给spider。</p></blockquote><h3 id="Spiders"><a href="#Spiders" class="headerlink" title="Spiders"></a>Spiders</h3><blockquote><p>Spider是Scrapy用户编写用于分析response并提取item(即获取到的item)或额外跟进的URL的类。 每个spider负责处理一个特定(或一些)网站。 </p></blockquote><h3 id="Item-Pipeline"><a href="#Item-Pipeline" class="headerlink" title="Item Pipeline"></a>Item Pipeline</h3><blockquote><p>Item Pipeline负责处理被spider提取出来的item。典型的处理有清理、 验证及持久化(例如存取到数据库中)。  </p></blockquote><p>当页面被爬虫解析所需的数据存入Item后，将被发送到项目管道(Pipeline)，并经过几个特定的次序处理数据，最后存入本地文件或存入数据库。</p><h3 id="下载器中间件-Downloader-middlewares"><a href="#下载器中间件-Downloader-middlewares" class="headerlink" title="下载器中间件(Downloader middlewares)"></a>下载器中间件(Downloader middlewares)</h3><blockquote><p>下载器中间件是在引擎及下载器之间的特定钩子(specific hook)，处理Downloader传递给引擎的response。 其提供了一个简便的机制，通过插入自定义代码来扩展Scrapy功能。</p></blockquote><p>通过设置下载器中间件可以实现爬虫自动更换user-agent、IP等功能。</p><h3 id="Spider中间件-Spider-middlewares"><a href="#Spider中间件-Spider-middlewares" class="headerlink" title="Spider中间件(Spider middlewares)"></a>Spider中间件(Spider middlewares)</h3><blockquote><p>Spider中间件是在引擎及Spider之间的特定钩子(specific hook)，处理spider的输入(response)和输出(items及requests)。 其提供了一个简便的机制，通过插入自定义代码来扩展Scrapy功能。</p></blockquote><h2 id="数据流-Data-flow"><a href="#数据流-Data-flow" class="headerlink" title="数据流(Data flow)"></a>数据流(Data flow)</h2><blockquote><ol><li><p>引擎打开一个网站(open a domain)，找到处理该网站的Spider并向该spider请求第一个要爬取的URL(s)。</p></li><li><p>引擎从Spider中获取到第一个要爬取的URL并在调度器(Scheduler)以Request调度。</p></li><li><p>引擎向调度器请求下一个要爬取的URL。</p></li><li><p>调度器返回下一个要爬取的URL给引擎，引擎将URL通过下载中间件(请求(request)方向)转发给下载器(Downloader)。</p></li><li><p>一旦页面下载完毕，下载器生成一个该页面的Response，并将其通过下载中间件(返回(response)方向)发送给引擎。</p></li><li><p>引擎从下载器中接收到Response并通过Spider中间件(输入方向)发送给Spider处理。</p></li><li><p>Spider处理Response并返回爬取到的Item及(跟进的)新的Request给引擎。</p></li><li><p>引擎将(Spider返回的)爬取到的Item给Item Pipeline，将(Spider返回的)Request给调度器。</p></li><li><p>(从第二步)重复直到调度器中没有更多地request，引擎关闭该网站。 </p></li></ol></blockquote><h1 id="建立Scrapy爬虫项目流程"><a href="#建立Scrapy爬虫项目流程" class="headerlink" title="建立Scrapy爬虫项目流程"></a>建立Scrapy爬虫项目流程</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>在开始爬取之前，首先要创建一个新的Scrapy项目。这里以爬取我的博客为例，进入你打算存储代码的目录中，运行下列命令:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrapy startproject scrapyspider</div></pre></td></tr></table></figure><p>该命令将会创建包含下列内容的<code>scrapyspider</code>目录:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">scrapyspider/</div><div class="line">    scrapy.cfg</div><div class="line">    scrapyspider/</div><div class="line">        __init__.py</div><div class="line">        items.py</div><div class="line">        pipelines.py</div><div class="line">        settings.py</div><div class="line">        spiders/</div><div class="line">            __init__.py</div><div class="line">            ...</div></pre></td></tr></table></figure></p><p>这些文件分别是:</p><ul><li>scrapy.cfg: 项目的配置文件。</li><li>tutorial/: 该项目的python模块。之后您将在此加入代码。</li><li>tutorial/items.py: 项目中的item文件。</li><li>tutorial/pipelines.py: 项目中的pipelines文件。</li><li>tutorial/settings.py: 项目的设置文件。</li><li>tutorial/spiders/: 放置spider代码的目录。</li></ul><h2 id="编写第一个爬虫-Spider"><a href="#编写第一个爬虫-Spider" class="headerlink" title="编写第一个爬虫(Spider)"></a>编写第一个爬虫(Spider)</h2><blockquote><p>Spider是用户编写用于从单个网站(或者一些网站)爬取数据的类。</p><p>其包含了一个用于下载的初始URL，如何跟进网页中的链接以及如何分析页面中的内容， 提取生成 item 的方法。</p><p>为了创建一个Spider，您必须继承 scrapy.Spider 类， 且定义以下三个属性:</p><ul><li>name: 用于区别Spider。 该名字必须是唯一的，您不可以为不同的Spider设定相同的名字。  </li><li>start_urls: 包含了Spider在启动时进行爬取的url列表。 因此，第一个被获取到的页面将是其中之一。 后续的URL则从初始的URL获取到的数据中提取。</li><li>parse() 是spider的一个方法。 被调用时，每个初始URL完成下载后生成的 Response 对象将会作为唯一的参数传递给该函数。 该方法负责解析返回的数据(response data)，提取数据(生成item)以及生成需要进一步处理的URL的 Request 对象。</li></ul></blockquote><p>以下为我们的第一个Spider代码，保存在<code>scrapyspider/spiders</code>目录下的<code>blog_spider.py</code>文件中:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> Spider</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogSpider</span><span class="params">(Spider)</span>:</span></div><div class="line">    name = <span class="string">'woodenrobot'</span></div><div class="line">    start_urls = [<span class="string">'https://woodenrobot.me'</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        titles = response.xpath(<span class="string">'//a[@class="post-title-link"]/text()'</span>).extract()</div><div class="line">        <span class="keyword">for</span> title <span class="keyword">in</span> titles:</div><div class="line">            <span class="keyword">print</span> title.strip()</div></pre></td></tr></table></figure></p><h2 id="启动爬虫"><a href="#启动爬虫" class="headerlink" title="启动爬虫"></a>启动爬虫</h2><p>在项目文件夹内打开<code>cmd</code>运行下列命令：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrapy crawl woodenrobot</div></pre></td></tr></table></figure></p><p>启动爬虫后就可以看到打印出来当前页所有文章标题了。</p><p><strong>Ps:这一篇教程里就先简单介绍这么多，有好多东西我还没想好这么讲。期待后面的干货吧！</strong></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ol><li><a href="http://scrapy-chs.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">Scrapy官方中文文档</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;转行做python程序员已经有三个月了，这三个月用Scrapy爬虫框架写了两百多个爬虫，不能说精通了Scrapy，但是已经对Scrapy有了一定的熟悉。准备写一个系列的Scrapy爬虫教程，一方面通过输出巩固和梳理自己这段时间学到的知识，另一方面当初受惠于别人的博客教程，我也想通过这个系列教程帮助一些想要学习Scrapy的人。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://woodenrobot.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://woodenrobot.me/tags/Python/"/>
    
      <category term="爬虫" scheme="http://woodenrobot.me/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Scrapy" scheme="http://woodenrobot.me/tags/Scrapy/"/>
    
  </entry>
  
</feed>
